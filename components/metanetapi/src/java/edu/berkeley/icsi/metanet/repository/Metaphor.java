package edu.berkeley.icsi.metanet.repository;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Metaphor <br>
 * @version generated on Tue Mar 05 15:42:49 PST 2013 by jhong
 */

public interface Metaphor extends WrappedIndividual {

    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#entailsMetaphor
     */
     
    /**
     * Gets all property values for the entailsMetaphor property.<p>
     * 
     * @returns a collection of values for the entailsMetaphor property.
     */
    Collection<? extends Metaphor> getEntailsMetaphor();

    /**
     * Checks if the class has a entailsMetaphor property value.<p>
     * 
     * @return true if there is a entailsMetaphor property value.
     */
    boolean hasEntailsMetaphor();

    /**
     * Adds a entailsMetaphor property value.<p>
     * 
     * @param newEntailsMetaphor the entailsMetaphor property value to be added
     */
    void addEntailsMetaphor(Metaphor newEntailsMetaphor);

    /**
     * Removes a entailsMetaphor property value.<p>
     * 
     * @param oldEntailsMetaphor the entailsMetaphor property value to be removed.
     */
    void removeEntailsMetaphor(Metaphor oldEntailsMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasEntailment
     */
     
    /**
     * Gets all property values for the hasEntailment property.<p>
     * 
     * @returns a collection of values for the hasEntailment property.
     */
    Collection<? extends Entailment> getHasEntailment();

    /**
     * Checks if the class has a hasEntailment property value.<p>
     * 
     * @return true if there is a hasEntailment property value.
     */
    boolean hasHasEntailment();

    /**
     * Adds a hasEntailment property value.<p>
     * 
     * @param newHasEntailment the hasEntailment property value to be added
     */
    void addHasEntailment(Entailment newHasEntailment);

    /**
     * Removes a hasEntailment property value.<p>
     * 
     * @param oldHasEntailment the hasEntailment property value to be removed.
     */
    void removeHasEntailment(Entailment oldHasEntailment);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasExample
     */
     
    /**
     * Gets all property values for the hasExample property.<p>
     * 
     * @returns a collection of values for the hasExample property.
     */
    Collection<? extends Example> getHasExample();

    /**
     * Checks if the class has a hasExample property value.<p>
     * 
     * @return true if there is a hasExample property value.
     */
    boolean hasHasExample();

    /**
     * Adds a hasExample property value.<p>
     * 
     * @param newHasExample the hasExample property value to be added
     */
    void addHasExample(Example newHasExample);

    /**
     * Removes a hasExample property value.<p>
     * 
     * @param oldHasExample the hasExample property value to be removed.
     */
    void removeHasExample(Example oldHasExample);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasMappings
     */
     
    /**
     * Gets all property values for the hasMappings property.<p>
     * 
     * @returns a collection of values for the hasMappings property.
     */
    Collection<? extends Mapping> getHasMappings();

    /**
     * Checks if the class has a hasMappings property value.<p>
     * 
     * @return true if there is a hasMappings property value.
     */
    boolean hasHasMappings();

    /**
     * Adds a hasMappings property value.<p>
     * 
     * @param newHasMappings the hasMappings property value to be added
     */
    void addHasMappings(Mapping newHasMappings);

    /**
     * Removes a hasMappings property value.<p>
     * 
     * @param oldHasMappings the hasMappings property value to be removed.
     */
    void removeHasMappings(Mapping oldHasMappings);


    /* ***************************************************
     * Functional Object Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasSourceSchema
     */
     
    /**
     * Gets the property value for the hasSourceSchema functional property.<p>
     * 
     * @returns a value for the hasSourceSchema property or null
     */
    Schema getHasSourceSchema();

    /**
     * Checks if the class has a hasSourceSchema property value.<p>
     * 
     * @return true if there is a hasSourceSchema property value.
     */
    boolean hasHasSourceSchema();

    /**
     * Adds a hasSourceSchema property value.<p>
     * 
     * @param newHasSourceSchema the hasSourceSchema property value to be added
     */
    void addHasSourceSchema(Schema newHasSourceSchema);

    /**
     * Removes a hasSourceSchema property value.<p>
     * 
     * @param oldHasSourceSchema the hasSourceSchema property value to be removed.
     */
    void removeHasSourceSchema(Schema oldHasSourceSchema);


    /* ***************************************************
     * Functional Object Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasTargetSchema
     */
     
    /**
     * Gets the property value for the hasTargetSchema functional property.<p>
     * 
     * @returns a value for the hasTargetSchema property or null
     */
    Schema getHasTargetSchema();

    /**
     * Checks if the class has a hasTargetSchema property value.<p>
     * 
     * @return true if there is a hasTargetSchema property value.
     */
    boolean hasHasTargetSchema();

    /**
     * Adds a hasTargetSchema property value.<p>
     * 
     * @param newHasTargetSchema the hasTargetSchema property value to be added
     */
    void addHasTargetSchema(Schema newHasTargetSchema);

    /**
     * Removes a hasTargetSchema property value.<p>
     * 
     * @param oldHasTargetSchema the hasTargetSchema property value to be removed.
     */
    void removeHasTargetSchema(Schema oldHasTargetSchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasTransitiveSubpart1Metaphor
     */
     
    /**
     * Gets all property values for the hasTransitiveSubpart1Metaphor property.<p>
     * 
     * @returns a collection of values for the hasTransitiveSubpart1Metaphor property.
     */
    Collection<? extends Metaphor> getHasTransitiveSubpart1Metaphor();

    /**
     * Checks if the class has a hasTransitiveSubpart1Metaphor property value.<p>
     * 
     * @return true if there is a hasTransitiveSubpart1Metaphor property value.
     */
    boolean hasHasTransitiveSubpart1Metaphor();

    /**
     * Adds a hasTransitiveSubpart1Metaphor property value.<p>
     * 
     * @param newHasTransitiveSubpart1Metaphor the hasTransitiveSubpart1Metaphor property value to be added
     */
    void addHasTransitiveSubpart1Metaphor(Metaphor newHasTransitiveSubpart1Metaphor);

    /**
     * Removes a hasTransitiveSubpart1Metaphor property value.<p>
     * 
     * @param oldHasTransitiveSubpart1Metaphor the hasTransitiveSubpart1Metaphor property value to be removed.
     */
    void removeHasTransitiveSubpart1Metaphor(Metaphor oldHasTransitiveSubpart1Metaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasTransitiveSubpart2Metaphor
     */
     
    /**
     * Gets all property values for the hasTransitiveSubpart2Metaphor property.<p>
     * 
     * @returns a collection of values for the hasTransitiveSubpart2Metaphor property.
     */
    Collection<? extends Metaphor> getHasTransitiveSubpart2Metaphor();

    /**
     * Checks if the class has a hasTransitiveSubpart2Metaphor property value.<p>
     * 
     * @return true if there is a hasTransitiveSubpart2Metaphor property value.
     */
    boolean hasHasTransitiveSubpart2Metaphor();

    /**
     * Adds a hasTransitiveSubpart2Metaphor property value.<p>
     * 
     * @param newHasTransitiveSubpart2Metaphor the hasTransitiveSubpart2Metaphor property value to be added
     */
    void addHasTransitiveSubpart2Metaphor(Metaphor newHasTransitiveSubpart2Metaphor);

    /**
     * Removes a hasTransitiveSubpart2Metaphor property value.<p>
     * 
     * @param oldHasTransitiveSubpart2Metaphor the hasTransitiveSubpart2Metaphor property value to be removed.
     */
    void removeHasTransitiveSubpart2Metaphor(Metaphor oldHasTransitiveSubpart2Metaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isEntailedByMetaphor
     */
     
    /**
     * Gets all property values for the isEntailedByMetaphor property.<p>
     * 
     * @returns a collection of values for the isEntailedByMetaphor property.
     */
    Collection<? extends Metaphor> getIsEntailedByMetaphor();

    /**
     * Checks if the class has a isEntailedByMetaphor property value.<p>
     * 
     * @return true if there is a isEntailedByMetaphor property value.
     */
    boolean hasIsEntailedByMetaphor();

    /**
     * Adds a isEntailedByMetaphor property value.<p>
     * 
     * @param newIsEntailedByMetaphor the isEntailedByMetaphor property value to be added
     */
    void addIsEntailedByMetaphor(Metaphor newIsEntailedByMetaphor);

    /**
     * Removes a isEntailedByMetaphor property value.<p>
     * 
     * @param oldIsEntailedByMetaphor the isEntailedByMetaphor property value to be removed.
     */
    void removeIsEntailedByMetaphor(Metaphor oldIsEntailedByMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isInMetaphorFamily
     */
     
    /**
     * Gets all property values for the isInMetaphorFamily property.<p>
     * 
     * @returns a collection of values for the isInMetaphorFamily property.
     */
    Collection<? extends MetaphorFamily> getIsInMetaphorFamily();

    /**
     * Checks if the class has a isInMetaphorFamily property value.<p>
     * 
     * @return true if there is a isInMetaphorFamily property value.
     */
    boolean hasIsInMetaphorFamily();

    /**
     * Adds a isInMetaphorFamily property value.<p>
     * 
     * @param newIsInMetaphorFamily the isInMetaphorFamily property value to be added
     */
    void addIsInMetaphorFamily(MetaphorFamily newIsInMetaphorFamily);

    /**
     * Removes a isInMetaphorFamily property value.<p>
     * 
     * @param oldIsInMetaphorFamily the isInMetaphorFamily property value to be removed.
     */
    void removeIsInMetaphorFamily(MetaphorFamily oldIsInMetaphorFamily);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isRelatedToMetaphor
     */
     
    /**
     * Gets all property values for the isRelatedToMetaphor property.<p>
     * 
     * @returns a collection of values for the isRelatedToMetaphor property.
     */
    Collection<? extends Metaphor> getIsRelatedToMetaphor();

    /**
     * Checks if the class has a isRelatedToMetaphor property value.<p>
     * 
     * @return true if there is a isRelatedToMetaphor property value.
     */
    boolean hasIsRelatedToMetaphor();

    /**
     * Adds a isRelatedToMetaphor property value.<p>
     * 
     * @param newIsRelatedToMetaphor the isRelatedToMetaphor property value to be added
     */
    void addIsRelatedToMetaphor(Metaphor newIsRelatedToMetaphor);

    /**
     * Removes a isRelatedToMetaphor property value.<p>
     * 
     * @param oldIsRelatedToMetaphor the isRelatedToMetaphor property value to be removed.
     */
    void removeIsRelatedToMetaphor(Metaphor oldIsRelatedToMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isRelatedToMetaphorBySource
     */
     
    /**
     * Gets all property values for the isRelatedToMetaphorBySource property.<p>
     * 
     * @returns a collection of values for the isRelatedToMetaphorBySource property.
     */
    Collection<? extends Metaphor> getIsRelatedToMetaphorBySource();

    /**
     * Checks if the class has a isRelatedToMetaphorBySource property value.<p>
     * 
     * @return true if there is a isRelatedToMetaphorBySource property value.
     */
    boolean hasIsRelatedToMetaphorBySource();

    /**
     * Adds a isRelatedToMetaphorBySource property value.<p>
     * 
     * @param newIsRelatedToMetaphorBySource the isRelatedToMetaphorBySource property value to be added
     */
    void addIsRelatedToMetaphorBySource(Metaphor newIsRelatedToMetaphorBySource);

    /**
     * Removes a isRelatedToMetaphorBySource property value.<p>
     * 
     * @param oldIsRelatedToMetaphorBySource the isRelatedToMetaphorBySource property value to be removed.
     */
    void removeIsRelatedToMetaphorBySource(Metaphor oldIsRelatedToMetaphorBySource);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isRelatedToMetaphorByTarget
     */
     
    /**
     * Gets all property values for the isRelatedToMetaphorByTarget property.<p>
     * 
     * @returns a collection of values for the isRelatedToMetaphorByTarget property.
     */
    Collection<? extends Metaphor> getIsRelatedToMetaphorByTarget();

    /**
     * Checks if the class has a isRelatedToMetaphorByTarget property value.<p>
     * 
     * @return true if there is a isRelatedToMetaphorByTarget property value.
     */
    boolean hasIsRelatedToMetaphorByTarget();

    /**
     * Adds a isRelatedToMetaphorByTarget property value.<p>
     * 
     * @param newIsRelatedToMetaphorByTarget the isRelatedToMetaphorByTarget property value to be added
     */
    void addIsRelatedToMetaphorByTarget(Metaphor newIsRelatedToMetaphorByTarget);

    /**
     * Removes a isRelatedToMetaphorByTarget property value.<p>
     * 
     * @param oldIsRelatedToMetaphorByTarget the isRelatedToMetaphorByTarget property value to be removed.
     */
    void removeIsRelatedToMetaphorByTarget(Metaphor oldIsRelatedToMetaphorByTarget);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isSourceSubcaseOfMetaphor
     */
     
    /**
     * Gets all property values for the isSourceSubcaseOfMetaphor property.<p>
     * 
     * @returns a collection of values for the isSourceSubcaseOfMetaphor property.
     */
    Collection<? extends Metaphor> getIsSourceSubcaseOfMetaphor();

    /**
     * Checks if the class has a isSourceSubcaseOfMetaphor property value.<p>
     * 
     * @return true if there is a isSourceSubcaseOfMetaphor property value.
     */
    boolean hasIsSourceSubcaseOfMetaphor();

    /**
     * Adds a isSourceSubcaseOfMetaphor property value.<p>
     * 
     * @param newIsSourceSubcaseOfMetaphor the isSourceSubcaseOfMetaphor property value to be added
     */
    void addIsSourceSubcaseOfMetaphor(Metaphor newIsSourceSubcaseOfMetaphor);

    /**
     * Removes a isSourceSubcaseOfMetaphor property value.<p>
     * 
     * @param oldIsSourceSubcaseOfMetaphor the isSourceSubcaseOfMetaphor property value to be removed.
     */
    void removeIsSourceSubcaseOfMetaphor(Metaphor oldIsSourceSubcaseOfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isSourceSupercaseOfMetaphor
     */
     
    /**
     * Gets all property values for the isSourceSupercaseOfMetaphor property.<p>
     * 
     * @returns a collection of values for the isSourceSupercaseOfMetaphor property.
     */
    Collection<? extends Metaphor> getIsSourceSupercaseOfMetaphor();

    /**
     * Checks if the class has a isSourceSupercaseOfMetaphor property value.<p>
     * 
     * @return true if there is a isSourceSupercaseOfMetaphor property value.
     */
    boolean hasIsSourceSupercaseOfMetaphor();

    /**
     * Adds a isSourceSupercaseOfMetaphor property value.<p>
     * 
     * @param newIsSourceSupercaseOfMetaphor the isSourceSupercaseOfMetaphor property value to be added
     */
    void addIsSourceSupercaseOfMetaphor(Metaphor newIsSourceSupercaseOfMetaphor);

    /**
     * Removes a isSourceSupercaseOfMetaphor property value.<p>
     * 
     * @param oldIsSourceSupercaseOfMetaphor the isSourceSupercaseOfMetaphor property value to be removed.
     */
    void removeIsSourceSupercaseOfMetaphor(Metaphor oldIsSourceSupercaseOfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isSubcaseOfMetaphor
     */
     
    /**
     * Gets all property values for the isSubcaseOfMetaphor property.<p>
     * 
     * @returns a collection of values for the isSubcaseOfMetaphor property.
     */
    Collection<? extends Metaphor> getIsSubcaseOfMetaphor();

    /**
     * Checks if the class has a isSubcaseOfMetaphor property value.<p>
     * 
     * @return true if there is a isSubcaseOfMetaphor property value.
     */
    boolean hasIsSubcaseOfMetaphor();

    /**
     * Adds a isSubcaseOfMetaphor property value.<p>
     * 
     * @param newIsSubcaseOfMetaphor the isSubcaseOfMetaphor property value to be added
     */
    void addIsSubcaseOfMetaphor(Metaphor newIsSubcaseOfMetaphor);

    /**
     * Removes a isSubcaseOfMetaphor property value.<p>
     * 
     * @param oldIsSubcaseOfMetaphor the isSubcaseOfMetaphor property value to be removed.
     */
    void removeIsSubcaseOfMetaphor(Metaphor oldIsSubcaseOfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isSupercaseOfMetaphor
     */
     
    /**
     * Gets all property values for the isSupercaseOfMetaphor property.<p>
     * 
     * @returns a collection of values for the isSupercaseOfMetaphor property.
     */
    Collection<? extends Metaphor> getIsSupercaseOfMetaphor();

    /**
     * Checks if the class has a isSupercaseOfMetaphor property value.<p>
     * 
     * @return true if there is a isSupercaseOfMetaphor property value.
     */
    boolean hasIsSupercaseOfMetaphor();

    /**
     * Adds a isSupercaseOfMetaphor property value.<p>
     * 
     * @param newIsSupercaseOfMetaphor the isSupercaseOfMetaphor property value to be added
     */
    void addIsSupercaseOfMetaphor(Metaphor newIsSupercaseOfMetaphor);

    /**
     * Removes a isSupercaseOfMetaphor property value.<p>
     * 
     * @param oldIsSupercaseOfMetaphor the isSupercaseOfMetaphor property value to be removed.
     */
    void removeIsSupercaseOfMetaphor(Metaphor oldIsSupercaseOfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isTargetSubcaseOfMetaphor
     */
     
    /**
     * Gets all property values for the isTargetSubcaseOfMetaphor property.<p>
     * 
     * @returns a collection of values for the isTargetSubcaseOfMetaphor property.
     */
    Collection<? extends Metaphor> getIsTargetSubcaseOfMetaphor();

    /**
     * Checks if the class has a isTargetSubcaseOfMetaphor property value.<p>
     * 
     * @return true if there is a isTargetSubcaseOfMetaphor property value.
     */
    boolean hasIsTargetSubcaseOfMetaphor();

    /**
     * Adds a isTargetSubcaseOfMetaphor property value.<p>
     * 
     * @param newIsTargetSubcaseOfMetaphor the isTargetSubcaseOfMetaphor property value to be added
     */
    void addIsTargetSubcaseOfMetaphor(Metaphor newIsTargetSubcaseOfMetaphor);

    /**
     * Removes a isTargetSubcaseOfMetaphor property value.<p>
     * 
     * @param oldIsTargetSubcaseOfMetaphor the isTargetSubcaseOfMetaphor property value to be removed.
     */
    void removeIsTargetSubcaseOfMetaphor(Metaphor oldIsTargetSubcaseOfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isTargetSupercaseOfMetaphor
     */
     
    /**
     * Gets all property values for the isTargetSupercaseOfMetaphor property.<p>
     * 
     * @returns a collection of values for the isTargetSupercaseOfMetaphor property.
     */
    Collection<? extends Metaphor> getIsTargetSupercaseOfMetaphor();

    /**
     * Checks if the class has a isTargetSupercaseOfMetaphor property value.<p>
     * 
     * @return true if there is a isTargetSupercaseOfMetaphor property value.
     */
    boolean hasIsTargetSupercaseOfMetaphor();

    /**
     * Adds a isTargetSupercaseOfMetaphor property value.<p>
     * 
     * @param newIsTargetSupercaseOfMetaphor the isTargetSupercaseOfMetaphor property value to be added
     */
    void addIsTargetSupercaseOfMetaphor(Metaphor newIsTargetSupercaseOfMetaphor);

    /**
     * Removes a isTargetSupercaseOfMetaphor property value.<p>
     * 
     * @param oldIsTargetSupercaseOfMetaphor the isTargetSupercaseOfMetaphor property value to be removed.
     */
    void removeIsTargetSupercaseOfMetaphor(Metaphor oldIsTargetSupercaseOfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isTransitiveSubpart1OfMetaphor
     */
     
    /**
     * Gets all property values for the isTransitiveSubpart1OfMetaphor property.<p>
     * 
     * @returns a collection of values for the isTransitiveSubpart1OfMetaphor property.
     */
    Collection<? extends Metaphor> getIsTransitiveSubpart1OfMetaphor();

    /**
     * Checks if the class has a isTransitiveSubpart1OfMetaphor property value.<p>
     * 
     * @return true if there is a isTransitiveSubpart1OfMetaphor property value.
     */
    boolean hasIsTransitiveSubpart1OfMetaphor();

    /**
     * Adds a isTransitiveSubpart1OfMetaphor property value.<p>
     * 
     * @param newIsTransitiveSubpart1OfMetaphor the isTransitiveSubpart1OfMetaphor property value to be added
     */
    void addIsTransitiveSubpart1OfMetaphor(Metaphor newIsTransitiveSubpart1OfMetaphor);

    /**
     * Removes a isTransitiveSubpart1OfMetaphor property value.<p>
     * 
     * @param oldIsTransitiveSubpart1OfMetaphor the isTransitiveSubpart1OfMetaphor property value to be removed.
     */
    void removeIsTransitiveSubpart1OfMetaphor(Metaphor oldIsTransitiveSubpart1OfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isTransitiveSubpart2OfMetaphor
     */
     
    /**
     * Gets all property values for the isTransitiveSubpart2OfMetaphor property.<p>
     * 
     * @returns a collection of values for the isTransitiveSubpart2OfMetaphor property.
     */
    Collection<? extends Metaphor> getIsTransitiveSubpart2OfMetaphor();

    /**
     * Checks if the class has a isTransitiveSubpart2OfMetaphor property value.<p>
     * 
     * @return true if there is a isTransitiveSubpart2OfMetaphor property value.
     */
    boolean hasIsTransitiveSubpart2OfMetaphor();

    /**
     * Adds a isTransitiveSubpart2OfMetaphor property value.<p>
     * 
     * @param newIsTransitiveSubpart2OfMetaphor the isTransitiveSubpart2OfMetaphor property value to be added
     */
    void addIsTransitiveSubpart2OfMetaphor(Metaphor newIsTransitiveSubpart2OfMetaphor);

    /**
     * Removes a isTransitiveSubpart2OfMetaphor property value.<p>
     * 
     * @param oldIsTransitiveSubpart2OfMetaphor the isTransitiveSubpart2OfMetaphor property value to be removed.
     */
    void removeIsTransitiveSubpart2OfMetaphor(Metaphor oldIsTransitiveSubpart2OfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isUsedByMetaphor
     */
     
    /**
     * Gets all property values for the isUsedByMetaphor property.<p>
     * 
     * @returns a collection of values for the isUsedByMetaphor property.
     */
    Collection<? extends Metaphor> getIsUsedByMetaphor();

    /**
     * Checks if the class has a isUsedByMetaphor property value.<p>
     * 
     * @return true if there is a isUsedByMetaphor property value.
     */
    boolean hasIsUsedByMetaphor();

    /**
     * Adds a isUsedByMetaphor property value.<p>
     * 
     * @param newIsUsedByMetaphor the isUsedByMetaphor property value to be added
     */
    void addIsUsedByMetaphor(Metaphor newIsUsedByMetaphor);

    /**
     * Removes a isUsedByMetaphor property value.<p>
     * 
     * @param oldIsUsedByMetaphor the isUsedByMetaphor property value to be removed.
     */
    void removeIsUsedByMetaphor(Metaphor oldIsUsedByMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#makesUseOfMetaphor
     */
     
    /**
     * Gets all property values for the makesUseOfMetaphor property.<p>
     * 
     * @returns a collection of values for the makesUseOfMetaphor property.
     */
    Collection<? extends Metaphor> getMakesUseOfMetaphor();

    /**
     * Checks if the class has a makesUseOfMetaphor property value.<p>
     * 
     * @return true if there is a makesUseOfMetaphor property value.
     */
    boolean hasMakesUseOfMetaphor();

    /**
     * Adds a makesUseOfMetaphor property value.<p>
     * 
     * @param newMakesUseOfMetaphor the makesUseOfMetaphor property value to be added
     */
    void addMakesUseOfMetaphor(Metaphor newMakesUseOfMetaphor);

    /**
     * Removes a makesUseOfMetaphor property value.<p>
     * 
     * @param oldMakesUseOfMetaphor the makesUseOfMetaphor property value to be removed.
     */
    void removeMakesUseOfMetaphor(Metaphor oldMakesUseOfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasAlias
     */
     
    /**
     * Gets all property values for the hasAlias property.<p>
     * 
     * @returns a collection of values for the hasAlias property.
     */
    Collection<? extends Object> getHasAlias();

    /**
     * Checks if the class has a hasAlias property value.<p>
     * 
     * @return true if there is a hasAlias property value.
     */
    boolean hasHasAlias();

    /**
     * Adds a hasAlias property value.<p>
     * 
     * @param newHasAlias the hasAlias property value to be added
     */
    void addHasAlias(Object newHasAlias);

    /**
     * Removes a hasAlias property value.<p>
     * 
     * @param oldHasAlias the hasAlias property value to be removed.
     */
    void removeHasAlias(Object oldHasAlias);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasExperientialBasis
     */
     
    /**
     * Gets the value for the hasExperientialBasis functional property.<p>
     * 
     * @returns the value for the hasExperientialBasis property or null
     */
    String getHasExperientialBasis();

    /**
     * Checks if the class has a hasExperientialBasis property value.<p>
     * 
     * @return true if there is a hasExperientialBasis property value.
     */
    boolean hasHasExperientialBasis();

    /**
     * Adds a hasExperientialBasis property value.<p>
     * 
     * @param newHasExperientialBasis the hasExperientialBasis property value to be added
     */
    void addHasExperientialBasis(String newHasExperientialBasis);

    /**
     * Removes a hasExperientialBasis property value.<p>
     * 
     * @param oldHasExperientialBasis the hasExperientialBasis property value to be removed.
     */
    void removeHasExperientialBasis(String oldHasExperientialBasis);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasMetaphorLevel
     */
     
    /**
     * Gets the value for the hasMetaphorLevel functional property.<p>
     * 
     * @returns the value for the hasMetaphorLevel property or null
     */
    String getHasMetaphorLevel();

    /**
     * Checks if the class has a hasMetaphorLevel property value.<p>
     * 
     * @return true if there is a hasMetaphorLevel property value.
     */
    boolean hasHasMetaphorLevel();

    /**
     * Adds a hasMetaphorLevel property value.<p>
     * 
     * @param newHasMetaphorLevel the hasMetaphorLevel property value to be added
     */
    void addHasMetaphorLevel(String newHasMetaphorLevel);

    /**
     * Removes a hasMetaphorLevel property value.<p>
     * 
     * @param oldHasMetaphorLevel the hasMetaphorLevel property value to be removed.
     */
    void removeHasMetaphorLevel(String oldHasMetaphorLevel);



    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasMetaphorType
     */
     
    /**
     * Gets all property values for the hasMetaphorType property.<p>
     * 
     * @returns a collection of values for the hasMetaphorType property.
     */
    Collection<? extends String> getHasMetaphorType();

    /**
     * Checks if the class has a hasMetaphorType property value.<p>
     * 
     * @return true if there is a hasMetaphorType property value.
     */
    boolean hasHasMetaphorType();

    /**
     * Adds a hasMetaphorType property value.<p>
     * 
     * @param newHasMetaphorType the hasMetaphorType property value to be added
     */
    void addHasMetaphorType(String newHasMetaphorType);

    /**
     * Removes a hasMetaphorType property value.<p>
     * 
     * @param oldHasMetaphorType the hasMetaphorType property value to be removed.
     */
    void removeHasMetaphorType(String oldHasMetaphorType);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasName
     */
     
    /**
     * Gets the value for the hasName functional property.<p>
     * 
     * @returns the value for the hasName property or null
     */
    String getHasName();

    /**
     * Checks if the class has a hasName property value.<p>
     * 
     * @return true if there is a hasName property value.
     */
    boolean hasHasName();

    /**
     * Adds a hasName property value.<p>
     * 
     * @param newHasName the hasName property value to be added
     */
    void addHasName(String newHasName);

    /**
     * Removes a hasName property value.<p>
     * 
     * @param oldHasName the hasName property value to be removed.
     */
    void removeHasName(String oldHasName);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasNameGloss
     */
     
    /**
     * Gets the value for the hasNameGloss functional property.<p>
     * 
     * @returns the value for the hasNameGloss property or null
     */
    String getHasNameGloss();

    /**
     * Checks if the class has a hasNameGloss property value.<p>
     * 
     * @return true if there is a hasNameGloss property value.
     */
    boolean hasHasNameGloss();

    /**
     * Adds a hasNameGloss property value.<p>
     * 
     * @param newHasNameGloss the hasNameGloss property value to be added
     */
    void addHasNameGloss(String newHasNameGloss);

    /**
     * Removes a hasNameGloss property value.<p>
     * 
     * @param oldHasNameGloss the hasNameGloss property value to be removed.
     */
    void removeHasNameGloss(String oldHasNameGloss);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isFromLanguage
     */
     
    /**
     * Gets the value for the isFromLanguage functional property.<p>
     * 
     * @returns the value for the isFromLanguage property or null
     */
    String getIsFromLanguage();

    /**
     * Checks if the class has a isFromLanguage property value.<p>
     * 
     * @return true if there is a isFromLanguage property value.
     */
    boolean hasIsFromLanguage();

    /**
     * Adds a isFromLanguage property value.<p>
     * 
     * @param newIsFromLanguage the isFromLanguage property value to be added
     */
    void addIsFromLanguage(String newIsFromLanguage);

    /**
     * Removes a isFromLanguage property value.<p>
     * 
     * @param oldIsFromLanguage the isFromLanguage property value to be removed.
     */
    void removeIsFromLanguage(String oldIsFromLanguage);



    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#wasInvestigatedFor
     */
     
    /**
     * Gets all property values for the wasInvestigatedFor property.<p>
     * 
     * @returns a collection of values for the wasInvestigatedFor property.
     */
    Collection<? extends String> getWasInvestigatedFor();

    /**
     * Checks if the class has a wasInvestigatedFor property value.<p>
     * 
     * @return true if there is a wasInvestigatedFor property value.
     */
    boolean hasWasInvestigatedFor();

    /**
     * Adds a wasInvestigatedFor property value.<p>
     * 
     * @param newWasInvestigatedFor the wasInvestigatedFor property value to be added
     */
    void addWasInvestigatedFor(String newWasInvestigatedFor);

    /**
     * Removes a wasInvestigatedFor property value.<p>
     * 
     * @param oldWasInvestigatedFor the wasInvestigatedFor property value to be removed.
     */
    void removeWasInvestigatedFor(String oldWasInvestigatedFor);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
