package edu.berkeley.icsi.metanet.repository;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: LinguisticMetaphor <br>
 * @version generated on Tue Mar 05 15:42:49 PST 2013 by jhong
 */

public interface LinguisticMetaphor extends WrappedIndividual {

    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasExample
     */
     
    /**
     * Gets all property values for the hasExample property.<p>
     * 
     * @returns a collection of values for the hasExample property.
     */
    Collection<? extends Example> getHasExample();

    /**
     * Checks if the class has a hasExample property value.<p>
     * 
     * @return true if there is a hasExample property value.
     */
    boolean hasHasExample();

    /**
     * Adds a hasExample property value.<p>
     * 
     * @param newHasExample the hasExample property value to be added
     */
    void addHasExample(Example newHasExample);

    /**
     * Removes a hasExample property value.<p>
     * 
     * @param oldHasExample the hasExample property value to be removed.
     */
    void removeHasExample(Example oldHasExample);


    /* ***************************************************
     * Functional Object Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isFromSeedMetaphor
     */
     
    /**
     * Gets the property value for the isFromSeedMetaphor functional property.<p>
     * 
     * @returns a value for the isFromSeedMetaphor property or null
     */
    LinguisticMetaphor getIsFromSeedMetaphor();

    /**
     * Checks if the class has a isFromSeedMetaphor property value.<p>
     * 
     * @return true if there is a isFromSeedMetaphor property value.
     */
    boolean hasIsFromSeedMetaphor();

    /**
     * Adds a isFromSeedMetaphor property value.<p>
     * 
     * @param newIsFromSeedMetaphor the isFromSeedMetaphor property value to be added
     */
    void addIsFromSeedMetaphor(LinguisticMetaphor newIsFromSeedMetaphor);

    /**
     * Removes a isFromSeedMetaphor property value.<p>
     * 
     * @param oldIsFromSeedMetaphor the isFromSeedMetaphor property value to be removed.
     */
    void removeIsFromSeedMetaphor(LinguisticMetaphor oldIsFromSeedMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isInstanceOfMetaphor
     */
     
    /**
     * Gets all property values for the isInstanceOfMetaphor property.<p>
     * 
     * @returns a collection of values for the isInstanceOfMetaphor property.
     */
    Collection<? extends Metaphor> getIsInstanceOfMetaphor();

    /**
     * Checks if the class has a isInstanceOfMetaphor property value.<p>
     * 
     * @return true if there is a isInstanceOfMetaphor property value.
     */
    boolean hasIsInstanceOfMetaphor();

    /**
     * Adds a isInstanceOfMetaphor property value.<p>
     * 
     * @param newIsInstanceOfMetaphor the isInstanceOfMetaphor property value to be added
     */
    void addIsInstanceOfMetaphor(Metaphor newIsInstanceOfMetaphor);

    /**
     * Removes a isInstanceOfMetaphor property value.<p>
     * 
     * @param oldIsInstanceOfMetaphor the isInstanceOfMetaphor property value to be removed.
     */
    void removeIsInstanceOfMetaphor(Metaphor oldIsInstanceOfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasAlias
     */
     
    /**
     * Gets all property values for the hasAlias property.<p>
     * 
     * @returns a collection of values for the hasAlias property.
     */
    Collection<? extends String> getHasAlias();

    /**
     * Checks if the class has a hasAlias property value.<p>
     * 
     * @return true if there is a hasAlias property value.
     */
    boolean hasHasAlias();

    /**
     * Adds a hasAlias property value.<p>
     * 
     * @param newHasAlias the hasAlias property value to be added
     */
    void addHasAlias(Object newHasAlias);

    /**
     * Removes a hasAlias property value.<p>
     * 
     * @param oldHasAlias the hasAlias property value to be removed.
     */
    void removeHasAlias(Object oldHasAlias);



    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasLinguisticMetaphorType
     */
     
    /**
     * Gets all property values for the hasLinguisticMetaphorType property.<p>
     * 
     * @returns a collection of values for the hasLinguisticMetaphorType property.
     */
    Collection<? extends String> getHasLinguisticMetaphorType();

    /**
     * Checks if the class has a hasLinguisticMetaphorType property value.<p>
     * 
     * @return true if there is a hasLinguisticMetaphorType property value.
     */
    boolean hasHasLinguisticMetaphorType();

    /**
     * Adds a hasLinguisticMetaphorType property value.<p>
     * 
     * @param newHasLinguisticMetaphorType the hasLinguisticMetaphorType property value to be added
     */
    void addHasLinguisticMetaphorType(String newHasLinguisticMetaphorType);

    /**
     * Removes a hasLinguisticMetaphorType property value.<p>
     * 
     * @param oldHasLinguisticMetaphorType the hasLinguisticMetaphorType property value to be removed.
     */
    void removeHasLinguisticMetaphorType(String oldHasLinguisticMetaphorType);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasLinguisticSource
     */
     
    /**
     * Gets the value for the hasLinguisticSource functional property.<p>
     * 
     * @returns the value for the hasLinguisticSource property or null
     */
    String getHasLinguisticSource();

    /**
     * Checks if the class has a hasLinguisticSource property value.<p>
     * 
     * @return true if there is a hasLinguisticSource property value.
     */
    boolean hasHasLinguisticSource();

    /**
     * Adds a hasLinguisticSource property value.<p>
     * 
     * @param newHasLinguisticSource the hasLinguisticSource property value to be added
     */
    void addHasLinguisticSource(String newHasLinguisticSource);

    /**
     * Removes a hasLinguisticSource property value.<p>
     * 
     * @param oldHasLinguisticSource the hasLinguisticSource property value to be removed.
     */
    void removeHasLinguisticSource(String oldHasLinguisticSource);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasLinguisticTarget
     */
     
    /**
     * Gets the value for the hasLinguisticTarget functional property.<p>
     * 
     * @returns the value for the hasLinguisticTarget property or null
     */
    String getHasLinguisticTarget();

    /**
     * Checks if the class has a hasLinguisticTarget property value.<p>
     * 
     * @return true if there is a hasLinguisticTarget property value.
     */
    boolean hasHasLinguisticTarget();

    /**
     * Adds a hasLinguisticTarget property value.<p>
     * 
     * @param newHasLinguisticTarget the hasLinguisticTarget property value to be added
     */
    void addHasLinguisticTarget(String newHasLinguisticTarget);

    /**
     * Removes a hasLinguisticTarget property value.<p>
     * 
     * @param oldHasLinguisticTarget the hasLinguisticTarget property value to be removed.
     */
    void removeHasLinguisticTarget(String oldHasLinguisticTarget);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasName
     */
     
    /**
     * Gets the value for the hasName functional property.<p>
     * 
     * @returns the value for the hasName property or null
     */
    String getHasName();

    /**
     * Checks if the class has a hasName property value.<p>
     * 
     * @return true if there is a hasName property value.
     */
    boolean hasHasName();

    /**
     * Adds a hasName property value.<p>
     * 
     * @param newHasName the hasName property value to be added
     */
    void addHasName(String newHasName);

    /**
     * Removes a hasName property value.<p>
     * 
     * @param oldHasName the hasName property value to be removed.
     */
    void removeHasName(String oldHasName);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasNameGloss
     */
     
    /**
     * Gets the value for the hasNameGloss functional property.<p>
     * 
     * @returns the value for the hasNameGloss property or null
     */
    String getHasNameGloss();

    /**
     * Checks if the class has a hasNameGloss property value.<p>
     * 
     * @return true if there is a hasNameGloss property value.
     */
    boolean hasHasNameGloss();

    /**
     * Adds a hasNameGloss property value.<p>
     * 
     * @param newHasNameGloss the hasNameGloss property value to be added
     */
    void addHasNameGloss(String newHasNameGloss);

    /**
     * Removes a hasNameGloss property value.<p>
     * 
     * @param oldHasNameGloss the hasNameGloss property value to be removed.
     */
    void removeHasNameGloss(String oldHasNameGloss);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasVerificationStatus
     */
     
    /**
     * Gets the value for the hasVerificationStatus functional property.<p>
     * 
     * @returns the value for the hasVerificationStatus property or null
     */
    String getHasVerificationStatus();

    /**
     * Checks if the class has a hasVerificationStatus property value.<p>
     * 
     * @return true if there is a hasVerificationStatus property value.
     */
    boolean hasHasVerificationStatus();

    /**
     * Adds a hasVerificationStatus property value.<p>
     * 
     * @param newHasVerificationStatus the hasVerificationStatus property value to be added
     */
    void addHasVerificationStatus(String newHasVerificationStatus);

    /**
     * Removes a hasVerificationStatus property value.<p>
     * 
     * @param oldHasVerificationStatus the hasVerificationStatus property value to be removed.
     */
    void removeHasVerificationStatus(String oldHasVerificationStatus);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isFromLanguage
     */
     
    /**
     * Gets the value for the isFromLanguage functional property.<p>
     * 
     * @returns the value for the isFromLanguage property or null
     */
    String getIsFromLanguage();

    /**
     * Checks if the class has a isFromLanguage property value.<p>
     * 
     * @return true if there is a isFromLanguage property value.
     */
    boolean hasIsFromLanguage();

    /**
     * Adds a isFromLanguage property value.<p>
     * 
     * @param newIsFromLanguage the isFromLanguage property value to be added
     */
    void addIsFromLanguage(String newIsFromLanguage);

    /**
     * Removes a isFromLanguage property value.<p>
     * 
     * @param oldIsFromLanguage the isFromLanguage property value to be removed.
     */
    void removeIsFromLanguage(String oldIsFromLanguage);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
