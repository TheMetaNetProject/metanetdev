package edu.berkeley.icsi.metanet.repository;

import edu.berkeley.icsi.metanet.repository.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MetaNetFactory<br>
 * @version generated on Tue Mar 05 15:42:48 PST 2013 by jhong
 */
public class MetaNetFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MetaNetFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MetaNetFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#AutoMetaphor
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#AutoMetaphor", AutoMetaphor.class, DefaultAutoMetaphor.class);
    }

    /**
     * Creates an instance of type AutoMetaphor.  Modifies the underlying ontology.
     */
    public AutoMetaphor createAutoMetaphor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AUTOMETAPHOR, DefaultAutoMetaphor.class);
    }

    /**
     * Gets an instance of type AutoMetaphor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AutoMetaphor getAutoMetaphor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AUTOMETAPHOR, DefaultAutoMetaphor.class);
    }

    /**
     * Gets all instances of AutoMetaphor from the ontology.
     */
    public Collection<? extends AutoMetaphor> getAllAutoMetaphorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AUTOMETAPHOR, DefaultAutoMetaphor.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#AutoSchema
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#AutoSchema", AutoSchema.class, DefaultAutoSchema.class);
    }

    /**
     * Creates an instance of type AutoSchema.  Modifies the underlying ontology.
     */
    public AutoSchema createAutoSchema(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AUTOSCHEMA, DefaultAutoSchema.class);
    }

    /**
     * Gets an instance of type AutoSchema with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AutoSchema getAutoSchema(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AUTOSCHEMA, DefaultAutoSchema.class);
    }

    /**
     * Gets all instances of AutoSchema from the ontology.
     */
    public Collection<? extends AutoSchema> getAllAutoSchemaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AUTOSCHEMA, DefaultAutoSchema.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Binding
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Binding", Binding.class, DefaultBinding.class);
    }

    /**
     * Creates an instance of type Binding.  Modifies the underlying ontology.
     */
    public Binding createBinding(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BINDING, DefaultBinding.class);
    }

    /**
     * Gets an instance of type Binding with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Binding getBinding(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BINDING, DefaultBinding.class);
    }

    /**
     * Gets all instances of Binding from the ontology.
     */
    public Collection<? extends Binding> getAllBindingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BINDING, DefaultBinding.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Entailment
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Entailment", Entailment.class, DefaultEntailment.class);
    }

    /**
     * Creates an instance of type Entailment.  Modifies the underlying ontology.
     */
    public Entailment createEntailment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENTAILMENT, DefaultEntailment.class);
    }

    /**
     * Gets an instance of type Entailment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Entailment getEntailment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENTAILMENT, DefaultEntailment.class);
    }

    /**
     * Gets all instances of Entailment from the ontology.
     */
    public Collection<? extends Entailment> getAllEntailmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENTAILMENT, DefaultEntailment.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Example
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Example", Example.class, DefaultExample.class);
    }

    /**
     * Creates an instance of type Example.  Modifies the underlying ontology.
     */
    public Example createExample(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXAMPLE, DefaultExample.class);
    }

    /**
     * Gets an instance of type Example with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Example getExample(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXAMPLE, DefaultExample.class);
    }

    /**
     * Gets all instances of Example from the ontology.
     */
    public Collection<? extends Example> getAllExampleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXAMPLE, DefaultExample.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Inference
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Inference", Inference.class, DefaultInference.class);
    }

    /**
     * Creates an instance of type Inference.  Modifies the underlying ontology.
     */
    public Inference createInference(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INFERENCE, DefaultInference.class);
    }

    /**
     * Gets an instance of type Inference with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Inference getInference(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INFERENCE, DefaultInference.class);
    }

    /**
     * Gets all instances of Inference from the ontology.
     */
    public Collection<? extends Inference> getAllInferenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INFERENCE, DefaultInference.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#LexicalUnit
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#LexicalUnit", LexicalUnit.class, DefaultLexicalUnit.class);
    }

    /**
     * Creates an instance of type LexicalUnit.  Modifies the underlying ontology.
     */
    public LexicalUnit createLexicalUnit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEXICALUNIT, DefaultLexicalUnit.class);
    }

    /**
     * Gets an instance of type LexicalUnit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LexicalUnit getLexicalUnit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEXICALUNIT, DefaultLexicalUnit.class);
    }

    /**
     * Gets all instances of LexicalUnit from the ontology.
     */
    public Collection<? extends LexicalUnit> getAllLexicalUnitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEXICALUNIT, DefaultLexicalUnit.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#LinguisticMetaphor
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#LinguisticMetaphor", LinguisticMetaphor.class, DefaultLinguisticMetaphor.class);
    }

    /**
     * Creates an instance of type LinguisticMetaphor.  Modifies the underlying ontology.
     */
    public LinguisticMetaphor createLinguisticMetaphor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LINGUISTICMETAPHOR, DefaultLinguisticMetaphor.class);
    }

    /**
     * Gets an instance of type LinguisticMetaphor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LinguisticMetaphor getLinguisticMetaphor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LINGUISTICMETAPHOR, DefaultLinguisticMetaphor.class);
    }

    /**
     * Gets all instances of LinguisticMetaphor from the ontology.
     */
    public Collection<? extends LinguisticMetaphor> getAllLinguisticMetaphorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LINGUISTICMETAPHOR, DefaultLinguisticMetaphor.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Mapping
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Mapping", Mapping.class, DefaultMapping.class);
    }

    /**
     * Creates an instance of type Mapping.  Modifies the underlying ontology.
     */
    public Mapping createMapping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAPPING, DefaultMapping.class);
    }

    /**
     * Gets an instance of type Mapping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mapping getMapping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAPPING, DefaultMapping.class);
    }

    /**
     * Gets all instances of Mapping from the ontology.
     */
    public Collection<? extends Mapping> getAllMappingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAPPING, DefaultMapping.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Metaphor
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Metaphor", Metaphor.class, DefaultMetaphor.class);
    }

    /**
     * Creates an instance of type Metaphor.  Modifies the underlying ontology.
     */
    public Metaphor createMetaphor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_METAPHOR, DefaultMetaphor.class);
    }

    /**
     * Gets an instance of type Metaphor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Metaphor getMetaphor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_METAPHOR, DefaultMetaphor.class);
    }

    /**
     * Gets all instances of Metaphor from the ontology.
     */
    public Collection<? extends Metaphor> getAllMetaphorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_METAPHOR, DefaultMetaphor.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#MetaphorFamily
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#MetaphorFamily", MetaphorFamily.class, DefaultMetaphorFamily.class);
    }

    /**
     * Creates an instance of type MetaphorFamily.  Modifies the underlying ontology.
     */
    public MetaphorFamily createMetaphorFamily(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_METAPHORFAMILY, DefaultMetaphorFamily.class);
    }

    /**
     * Gets an instance of type MetaphorFamily with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MetaphorFamily getMetaphorFamily(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_METAPHORFAMILY, DefaultMetaphorFamily.class);
    }

    /**
     * Gets all instances of MetaphorFamily from the ontology.
     */
    public Collection<? extends MetaphorFamily> getAllMetaphorFamilyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_METAPHORFAMILY, DefaultMetaphorFamily.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Role
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Role", Role.class, DefaultRole.class);
    }

    /**
     * Creates an instance of type Role.  Modifies the underlying ontology.
     */
    public Role createRole(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets an instance of type Role with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Role getRole(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets all instances of Role from the ontology.
     */
    public Collection<? extends Role> getAllRoleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROLE, DefaultRole.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Schema
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#Schema", Schema.class, DefaultSchema.class);
    }

    /**
     * Creates an instance of type Schema.  Modifies the underlying ontology.
     */
    public Schema createSchema(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCHEMA, DefaultSchema.class);
    }

    /**
     * Gets an instance of type Schema with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Schema getSchema(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCHEMA, DefaultSchema.class);
    }

    /**
     * Gets all instances of Schema from the ontology.
     */
    public Collection<? extends Schema> getAllSchemaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCHEMA, DefaultSchema.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#SchemaFamily
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#SchemaFamily", SchemaFamily.class, DefaultSchemaFamily.class);
    }

    /**
     * Creates an instance of type SchemaFamily.  Modifies the underlying ontology.
     */
    public SchemaFamily createSchemaFamily(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCHEMAFAMILY, DefaultSchemaFamily.class);
    }

    /**
     * Gets an instance of type SchemaFamily with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SchemaFamily getSchemaFamily(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCHEMAFAMILY, DefaultSchemaFamily.class);
    }

    /**
     * Gets all instances of SchemaFamily from the ontology.
     */
    public Collection<? extends SchemaFamily> getAllSchemaFamilyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCHEMAFAMILY, DefaultSchemaFamily.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#VettedMetaphor
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#VettedMetaphor", VettedMetaphor.class, DefaultVettedMetaphor.class);
    }

    /**
     * Creates an instance of type VettedMetaphor.  Modifies the underlying ontology.
     */
    public VettedMetaphor createVettedMetaphor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VETTEDMETAPHOR, DefaultVettedMetaphor.class);
    }

    /**
     * Gets an instance of type VettedMetaphor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VettedMetaphor getVettedMetaphor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VETTEDMETAPHOR, DefaultVettedMetaphor.class);
    }

    /**
     * Gets all instances of VettedMetaphor from the ontology.
     */
    public Collection<? extends VettedMetaphor> getAllVettedMetaphorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VETTEDMETAPHOR, DefaultVettedMetaphor.class);
    }


    /* ***************************************************
     * Class https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#VettedSchema
     */

    {
        javaMapping.add("https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#VettedSchema", VettedSchema.class, DefaultVettedSchema.class);
    }

    /**
     * Creates an instance of type VettedSchema.  Modifies the underlying ontology.
     */
    public VettedSchema createVettedSchema(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VETTEDSCHEMA, DefaultVettedSchema.class);
    }

    /**
     * Gets an instance of type VettedSchema with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VettedSchema getVettedSchema(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VETTEDSCHEMA, DefaultVettedSchema.class);
    }

    /**
     * Gets all instances of VettedSchema from the ontology.
     */
    public Collection<? extends VettedSchema> getAllVettedSchemaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VETTEDSCHEMA, DefaultVettedSchema.class);
    }


}
