package edu.berkeley.icsi.metanet.repository;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Binding <br>
 * @version generated on Tue Mar 05 15:42:49 PST 2013 by jhong
 */

public interface Binding extends WrappedIndividual {

    /* ***************************************************
     * Functional Object Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasBoundRole1
     */
     
    /**
     * Gets the property value for the hasBoundRole1 functional property.<p>
     * 
     * @returns a value for the hasBoundRole1 property or null
     */
    Role getHasBoundRole1();

    /**
     * Checks if the class has a hasBoundRole1 property value.<p>
     * 
     * @return true if there is a hasBoundRole1 property value.
     */
    boolean hasHasBoundRole1();

    /**
     * Adds a hasBoundRole1 property value.<p>
     * 
     * @param newHasBoundRole1 the hasBoundRole1 property value to be added
     */
    void addHasBoundRole1(Role newHasBoundRole1);

    /**
     * Removes a hasBoundRole1 property value.<p>
     * 
     * @param oldHasBoundRole1 the hasBoundRole1 property value to be removed.
     */
    void removeHasBoundRole1(Role oldHasBoundRole1);


    /* ***************************************************
     * Functional Object Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasBoundRole2
     */
     
    /**
     * Gets the property value for the hasBoundRole2 functional property.<p>
     * 
     * @returns a value for the hasBoundRole2 property or null
     */
    Role getHasBoundRole2();

    /**
     * Checks if the class has a hasBoundRole2 property value.<p>
     * 
     * @return true if there is a hasBoundRole2 property value.
     */
    boolean hasHasBoundRole2();

    /**
     * Adds a hasBoundRole2 property value.<p>
     * 
     * @param newHasBoundRole2 the hasBoundRole2 property value to be added
     */
    void addHasBoundRole2(Role newHasBoundRole2);

    /**
     * Removes a hasBoundRole2 property value.<p>
     * 
     * @param oldHasBoundRole2 the hasBoundRole2 property value to be removed.
     */
    void removeHasBoundRole2(Role oldHasBoundRole2);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasBoundRoles
     */
     
    /**
     * Gets all property values for the hasBoundRoles property.<p>
     * 
     * @returns a collection of values for the hasBoundRoles property.
     */
    Collection<? extends Role> getHasBoundRoles();

    /**
     * Checks if the class has a hasBoundRoles property value.<p>
     * 
     * @return true if there is a hasBoundRoles property value.
     */
    boolean hasHasBoundRoles();

    /**
     * Adds a hasBoundRoles property value.<p>
     * 
     * @param newHasBoundRoles the hasBoundRoles property value to be added
     */
    void addHasBoundRoles(Role newHasBoundRoles);

    /**
     * Removes a hasBoundRoles property value.<p>
     * 
     * @param oldHasBoundRoles the hasBoundRoles property value to be removed.
     */
    void removeHasBoundRoles(Role oldHasBoundRoles);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasExample
     */
     
    /**
     * Gets all property values for the hasExample property.<p>
     * 
     * @returns a collection of values for the hasExample property.
     */
    Collection<? extends Example> getHasExample();

    /**
     * Checks if the class has a hasExample property value.<p>
     * 
     * @return true if there is a hasExample property value.
     */
    boolean hasHasExample();

    /**
     * Adds a hasExample property value.<p>
     * 
     * @param newHasExample the hasExample property value to be added
     */
    void addHasExample(Example newHasExample);

    /**
     * Removes a hasExample property value.<p>
     * 
     * @param oldHasExample the hasExample property value to be removed.
     */
    void removeHasExample(Example oldHasExample);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isBindingInSchema
     */
     
    /**
     * Gets all property values for the isBindingInSchema property.<p>
     * 
     * @returns a collection of values for the isBindingInSchema property.
     */
    Collection<? extends Schema> getIsBindingInSchema();

    /**
     * Checks if the class has a isBindingInSchema property value.<p>
     * 
     * @return true if there is a isBindingInSchema property value.
     */
    boolean hasIsBindingInSchema();

    /**
     * Adds a isBindingInSchema property value.<p>
     * 
     * @param newIsBindingInSchema the isBindingInSchema property value to be added
     */
    void addIsBindingInSchema(Schema newIsBindingInSchema);

    /**
     * Removes a isBindingInSchema property value.<p>
     * 
     * @param oldIsBindingInSchema the isBindingInSchema property value to be removed.
     */
    void removeIsBindingInSchema(Schema oldIsBindingInSchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasAlias
     */
     
    /**
     * Gets all property values for the hasAlias property.<p>
     * 
     * @returns a collection of values for the hasAlias property.
     */
    Collection<? extends String> getHasAlias();

    /**
     * Checks if the class has a hasAlias property value.<p>
     * 
     * @return true if there is a hasAlias property value.
     */
    boolean hasHasAlias();

    /**
     * Adds a hasAlias property value.<p>
     * 
     * @param newHasAlias the hasAlias property value to be added
     */
    void addHasAlias(Object newHasAlias);

    /**
     * Removes a hasAlias property value.<p>
     * 
     * @param oldHasAlias the hasAlias property value to be removed.
     */
    void removeHasAlias(Object oldHasAlias);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasName
     */
     
    /**
     * Gets the value for the hasName functional property.<p>
     * 
     * @returns the value for the hasName property or null
     */
    String getHasName();

    /**
     * Checks if the class has a hasName property value.<p>
     * 
     * @return true if there is a hasName property value.
     */
    boolean hasHasName();

    /**
     * Adds a hasName property value.<p>
     * 
     * @param newHasName the hasName property value to be added
     */
    void addHasName(String newHasName);

    /**
     * Removes a hasName property value.<p>
     * 
     * @param oldHasName the hasName property value to be removed.
     */
    void removeHasName(String oldHasName);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasNameGloss
     */
     
    /**
     * Gets the value for the hasNameGloss functional property.<p>
     * 
     * @returns the value for the hasNameGloss property or null
     */
    String getHasNameGloss();

    /**
     * Checks if the class has a hasNameGloss property value.<p>
     * 
     * @return true if there is a hasNameGloss property value.
     */
    boolean hasHasNameGloss();

    /**
     * Adds a hasNameGloss property value.<p>
     * 
     * @param newHasNameGloss the hasNameGloss property value to be added
     */
    void addHasNameGloss(String newHasNameGloss);

    /**
     * Removes a hasNameGloss property value.<p>
     * 
     * @param oldHasNameGloss the hasNameGloss property value to be removed.
     */
    void removeHasNameGloss(String oldHasNameGloss);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isFromLanguage
     */
     
    /**
     * Gets the value for the isFromLanguage functional property.<p>
     * 
     * @returns the value for the isFromLanguage property or null
     */
    String getIsFromLanguage();

    /**
     * Checks if the class has a isFromLanguage property value.<p>
     * 
     * @return true if there is a isFromLanguage property value.
     */
    boolean hasIsFromLanguage();

    /**
     * Adds a isFromLanguage property value.<p>
     * 
     * @param newIsFromLanguage the isFromLanguage property value to be added
     */
    void addIsFromLanguage(String newIsFromLanguage);

    /**
     * Removes a isFromLanguage property value.<p>
     * 
     * @param oldIsFromLanguage the isFromLanguage property value to be removed.
     */
    void removeIsFromLanguage(String oldIsFromLanguage);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
