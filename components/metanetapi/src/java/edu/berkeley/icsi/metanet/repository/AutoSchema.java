package edu.berkeley.icsi.metanet.repository;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: AutoSchema <br>
 * @version generated on Tue Mar 05 15:42:49 PST 2013 by jhong
 */

public interface AutoSchema extends Schema {

    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasBindings
     */
     
    /**
     * Gets all property values for the hasBindings property.<p>
     * 
     * @returns a collection of values for the hasBindings property.
     */
    Collection<? extends Binding> getHasBindings();

    /**
     * Checks if the class has a hasBindings property value.<p>
     * 
     * @return true if there is a hasBindings property value.
     */
    boolean hasHasBindings();

    /**
     * Adds a hasBindings property value.<p>
     * 
     * @param newHasBindings the hasBindings property value to be added
     */
    void addHasBindings(Binding newHasBindings);

    /**
     * Removes a hasBindings property value.<p>
     * 
     * @param oldHasBindings the hasBindings property value to be removed.
     */
    void removeHasBindings(Binding oldHasBindings);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasExample
     */
     
    /**
     * Gets all property values for the hasExample property.<p>
     * 
     * @returns a collection of values for the hasExample property.
     */
    Collection<? extends Example> getHasExample();

    /**
     * Checks if the class has a hasExample property value.<p>
     * 
     * @return true if there is a hasExample property value.
     */
    boolean hasHasExample();

    /**
     * Adds a hasExample property value.<p>
     * 
     * @param newHasExample the hasExample property value to be added
     */
    void addHasExample(Example newHasExample);

    /**
     * Removes a hasExample property value.<p>
     * 
     * @param oldHasExample the hasExample property value to be removed.
     */
    void removeHasExample(Example oldHasExample);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasInference
     */
     
    /**
     * Gets all property values for the hasInference property.<p>
     * 
     * @returns a collection of values for the hasInference property.
     */
    Collection<? extends Inference> getHasInference();

    /**
     * Checks if the class has a hasInference property value.<p>
     * 
     * @return true if there is a hasInference property value.
     */
    boolean hasHasInference();

    /**
     * Adds a hasInference property value.<p>
     * 
     * @param newHasInference the hasInference property value to be added
     */
    void addHasInference(Inference newHasInference);

    /**
     * Removes a hasInference property value.<p>
     * 
     * @param oldHasInference the hasInference property value to be removed.
     */
    void removeHasInference(Inference oldHasInference);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasLexicalUnit
     */
     
    /**
     * Gets all property values for the hasLexicalUnit property.<p>
     * 
     * @returns a collection of values for the hasLexicalUnit property.
     */
    Collection<? extends LexicalUnit> getHasLexicalUnit();

    /**
     * Checks if the class has a hasLexicalUnit property value.<p>
     * 
     * @return true if there is a hasLexicalUnit property value.
     */
    boolean hasHasLexicalUnit();

    /**
     * Adds a hasLexicalUnit property value.<p>
     * 
     * @param newHasLexicalUnit the hasLexicalUnit property value to be added
     */
    void addHasLexicalUnit(LexicalUnit newHasLexicalUnit);

    /**
     * Removes a hasLexicalUnit property value.<p>
     * 
     * @param oldHasLexicalUnit the hasLexicalUnit property value to be removed.
     */
    void removeHasLexicalUnit(LexicalUnit oldHasLexicalUnit);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasRoles
     */
     
    /**
     * Gets all property values for the hasRoles property.<p>
     * 
     * @returns a collection of values for the hasRoles property.
     */
    Collection<? extends Role> getHasRoles();

    /**
     * Checks if the class has a hasRoles property value.<p>
     * 
     * @return true if there is a hasRoles property value.
     */
    boolean hasHasRoles();

    /**
     * Adds a hasRoles property value.<p>
     * 
     * @param newHasRoles the hasRoles property value to be added
     */
    void addHasRoles(Role newHasRoles);

    /**
     * Removes a hasRoles property value.<p>
     * 
     * @param oldHasRoles the hasRoles property value to be removed.
     */
    void removeHasRoles(Role oldHasRoles);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isInSchemaFamily
     */
     
    /**
     * Gets all property values for the isInSchemaFamily property.<p>
     * 
     * @returns a collection of values for the isInSchemaFamily property.
     */
    Collection<? extends SchemaFamily> getIsInSchemaFamily();

    /**
     * Checks if the class has a isInSchemaFamily property value.<p>
     * 
     * @return true if there is a isInSchemaFamily property value.
     */
    boolean hasIsInSchemaFamily();

    /**
     * Adds a isInSchemaFamily property value.<p>
     * 
     * @param newIsInSchemaFamily the isInSchemaFamily property value to be added
     */
    void addIsInSchemaFamily(SchemaFamily newIsInSchemaFamily);

    /**
     * Removes a isInSchemaFamily property value.<p>
     * 
     * @param oldIsInSchemaFamily the isInSchemaFamily property value to be removed.
     */
    void removeIsInSchemaFamily(SchemaFamily oldIsInSchemaFamily);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isRelatedToSchema
     */
     
    /**
     * Gets all property values for the isRelatedToSchema property.<p>
     * 
     * @returns a collection of values for the isRelatedToSchema property.
     */
    Collection<? extends Schema> getIsRelatedToSchema();

    /**
     * Checks if the class has a isRelatedToSchema property value.<p>
     * 
     * @return true if there is a isRelatedToSchema property value.
     */
    boolean hasIsRelatedToSchema();

    /**
     * Adds a isRelatedToSchema property value.<p>
     * 
     * @param newIsRelatedToSchema the isRelatedToSchema property value to be added
     */
    void addIsRelatedToSchema(Schema newIsRelatedToSchema);

    /**
     * Removes a isRelatedToSchema property value.<p>
     * 
     * @param oldIsRelatedToSchema the isRelatedToSchema property value to be removed.
     */
    void removeIsRelatedToSchema(Schema oldIsRelatedToSchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isSourceDomainOfMetaphors
     */
     
    /**
     * Gets all property values for the isSourceDomainOfMetaphors property.<p>
     * 
     * @returns a collection of values for the isSourceDomainOfMetaphors property.
     */
    Collection<? extends Metaphor> getIsSourceDomainOfMetaphors();

    /**
     * Checks if the class has a isSourceDomainOfMetaphors property value.<p>
     * 
     * @return true if there is a isSourceDomainOfMetaphors property value.
     */
    boolean hasIsSourceDomainOfMetaphors();

    /**
     * Adds a isSourceDomainOfMetaphors property value.<p>
     * 
     * @param newIsSourceDomainOfMetaphors the isSourceDomainOfMetaphors property value to be added
     */
    void addIsSourceDomainOfMetaphors(Metaphor newIsSourceDomainOfMetaphors);

    /**
     * Removes a isSourceDomainOfMetaphors property value.<p>
     * 
     * @param oldIsSourceDomainOfMetaphors the isSourceDomainOfMetaphors property value to be removed.
     */
    void removeIsSourceDomainOfMetaphors(Metaphor oldIsSourceDomainOfMetaphors);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isSubcaseOfSchema
     */
     
    /**
     * Gets all property values for the isSubcaseOfSchema property.<p>
     * 
     * @returns a collection of values for the isSubcaseOfSchema property.
     */
    Collection<? extends Schema> getIsSubcaseOfSchema();

    /**
     * Checks if the class has a isSubcaseOfSchema property value.<p>
     * 
     * @return true if there is a isSubcaseOfSchema property value.
     */
    boolean hasIsSubcaseOfSchema();

    /**
     * Adds a isSubcaseOfSchema property value.<p>
     * 
     * @param newIsSubcaseOfSchema the isSubcaseOfSchema property value to be added
     */
    void addIsSubcaseOfSchema(Schema newIsSubcaseOfSchema);

    /**
     * Removes a isSubcaseOfSchema property value.<p>
     * 
     * @param oldIsSubcaseOfSchema the isSubcaseOfSchema property value to be removed.
     */
    void removeIsSubcaseOfSchema(Schema oldIsSubcaseOfSchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isSubprocessOfSchema
     */
     
    /**
     * Gets all property values for the isSubprocessOfSchema property.<p>
     * 
     * @returns a collection of values for the isSubprocessOfSchema property.
     */
    Collection<? extends Schema> getIsSubprocessOfSchema();

    /**
     * Checks if the class has a isSubprocessOfSchema property value.<p>
     * 
     * @return true if there is a isSubprocessOfSchema property value.
     */
    boolean hasIsSubprocessOfSchema();

    /**
     * Adds a isSubprocessOfSchema property value.<p>
     * 
     * @param newIsSubprocessOfSchema the isSubprocessOfSchema property value to be added
     */
    void addIsSubprocessOfSchema(Schema newIsSubprocessOfSchema);

    /**
     * Removes a isSubprocessOfSchema property value.<p>
     * 
     * @param oldIsSubprocessOfSchema the isSubprocessOfSchema property value to be removed.
     */
    void removeIsSubprocessOfSchema(Schema oldIsSubprocessOfSchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isSupercaseOfSchema
     */
     
    /**
     * Gets all property values for the isSupercaseOfSchema property.<p>
     * 
     * @returns a collection of values for the isSupercaseOfSchema property.
     */
    Collection<? extends Schema> getIsSupercaseOfSchema();

    /**
     * Checks if the class has a isSupercaseOfSchema property value.<p>
     * 
     * @return true if there is a isSupercaseOfSchema property value.
     */
    boolean hasIsSupercaseOfSchema();

    /**
     * Adds a isSupercaseOfSchema property value.<p>
     * 
     * @param newIsSupercaseOfSchema the isSupercaseOfSchema property value to be added
     */
    void addIsSupercaseOfSchema(Schema newIsSupercaseOfSchema);

    /**
     * Removes a isSupercaseOfSchema property value.<p>
     * 
     * @param oldIsSupercaseOfSchema the isSupercaseOfSchema property value to be removed.
     */
    void removeIsSupercaseOfSchema(Schema oldIsSupercaseOfSchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isSuperprocessOfSchema
     */
     
    /**
     * Gets all property values for the isSuperprocessOfSchema property.<p>
     * 
     * @returns a collection of values for the isSuperprocessOfSchema property.
     */
    Collection<? extends Schema> getIsSuperprocessOfSchema();

    /**
     * Checks if the class has a isSuperprocessOfSchema property value.<p>
     * 
     * @return true if there is a isSuperprocessOfSchema property value.
     */
    boolean hasIsSuperprocessOfSchema();

    /**
     * Adds a isSuperprocessOfSchema property value.<p>
     * 
     * @param newIsSuperprocessOfSchema the isSuperprocessOfSchema property value to be added
     */
    void addIsSuperprocessOfSchema(Schema newIsSuperprocessOfSchema);

    /**
     * Removes a isSuperprocessOfSchema property value.<p>
     * 
     * @param oldIsSuperprocessOfSchema the isSuperprocessOfSchema property value to be removed.
     */
    void removeIsSuperprocessOfSchema(Schema oldIsSuperprocessOfSchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isTargetDomainOfMetaphors
     */
     
    /**
     * Gets all property values for the isTargetDomainOfMetaphors property.<p>
     * 
     * @returns a collection of values for the isTargetDomainOfMetaphors property.
     */
    Collection<? extends Metaphor> getIsTargetDomainOfMetaphors();

    /**
     * Checks if the class has a isTargetDomainOfMetaphors property value.<p>
     * 
     * @return true if there is a isTargetDomainOfMetaphors property value.
     */
    boolean hasIsTargetDomainOfMetaphors();

    /**
     * Adds a isTargetDomainOfMetaphors property value.<p>
     * 
     * @param newIsTargetDomainOfMetaphors the isTargetDomainOfMetaphors property value to be added
     */
    void addIsTargetDomainOfMetaphors(Metaphor newIsTargetDomainOfMetaphors);

    /**
     * Removes a isTargetDomainOfMetaphors property value.<p>
     * 
     * @param oldIsTargetDomainOfMetaphors the isTargetDomainOfMetaphors property value to be removed.
     */
    void removeIsTargetDomainOfMetaphors(Metaphor oldIsTargetDomainOfMetaphors);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isUsedBySchema
     */
     
    /**
     * Gets all property values for the isUsedBySchema property.<p>
     * 
     * @returns a collection of values for the isUsedBySchema property.
     */
    Collection<? extends Schema> getIsUsedBySchema();

    /**
     * Checks if the class has a isUsedBySchema property value.<p>
     * 
     * @return true if there is a isUsedBySchema property value.
     */
    boolean hasIsUsedBySchema();

    /**
     * Adds a isUsedBySchema property value.<p>
     * 
     * @param newIsUsedBySchema the isUsedBySchema property value to be added
     */
    void addIsUsedBySchema(Schema newIsUsedBySchema);

    /**
     * Removes a isUsedBySchema property value.<p>
     * 
     * @param oldIsUsedBySchema the isUsedBySchema property value to be removed.
     */
    void removeIsUsedBySchema(Schema oldIsUsedBySchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#makesUseOfSchema
     */
     
    /**
     * Gets all property values for the makesUseOfSchema property.<p>
     * 
     * @returns a collection of values for the makesUseOfSchema property.
     */
    Collection<? extends Schema> getMakesUseOfSchema();

    /**
     * Checks if the class has a makesUseOfSchema property value.<p>
     * 
     * @return true if there is a makesUseOfSchema property value.
     */
    boolean hasMakesUseOfSchema();

    /**
     * Adds a makesUseOfSchema property value.<p>
     * 
     * @param newMakesUseOfSchema the makesUseOfSchema property value to be added
     */
    void addMakesUseOfSchema(Schema newMakesUseOfSchema);

    /**
     * Removes a makesUseOfSchema property value.<p>
     * 
     * @param oldMakesUseOfSchema the makesUseOfSchema property value to be removed.
     */
    void removeMakesUseOfSchema(Schema oldMakesUseOfSchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#correspondsToFrameNet
     */
     
    /**
     * Gets all property values for the correspondsToFrameNet property.<p>
     * 
     * @returns a collection of values for the correspondsToFrameNet property.
     */
    Collection<? extends String> getCorrespondsToFrameNet();

    /**
     * Checks if the class has a correspondsToFrameNet property value.<p>
     * 
     * @return true if there is a correspondsToFrameNet property value.
     */
    boolean hasCorrespondsToFrameNet();

    /**
     * Adds a correspondsToFrameNet property value.<p>
     * 
     * @param newCorrespondsToFrameNet the correspondsToFrameNet property value to be added
     */
    void addCorrespondsToFrameNet(String newCorrespondsToFrameNet);

    /**
     * Removes a correspondsToFrameNet property value.<p>
     * 
     * @param oldCorrespondsToFrameNet the correspondsToFrameNet property value to be removed.
     */
    void removeCorrespondsToFrameNet(String oldCorrespondsToFrameNet);



    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasAlias
     */
     
    /**
     * Gets all property values for the hasAlias property.<p>
     * 
     * @returns a collection of values for the hasAlias property.
     */
    Collection<? extends Object> getHasAlias();

    /**
     * Checks if the class has a hasAlias property value.<p>
     * 
     * @return true if there is a hasAlias property value.
     */
    boolean hasHasAlias();

    /**
     * Adds a hasAlias property value.<p>
     * 
     * @param newHasAlias the hasAlias property value to be added
     */
    void addHasAlias(Object newHasAlias);

    /**
     * Removes a hasAlias property value.<p>
     * 
     * @param oldHasAlias the hasAlias property value to be removed.
     */
    void removeHasAlias(Object oldHasAlias);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasCulturalContent
     */
     
    /**
     * Gets the value for the hasCulturalContent functional property.<p>
     * 
     * @returns the value for the hasCulturalContent property or null
     */
    String getHasCulturalContent();

    /**
     * Checks if the class has a hasCulturalContent property value.<p>
     * 
     * @return true if there is a hasCulturalContent property value.
     */
    boolean hasHasCulturalContent();

    /**
     * Adds a hasCulturalContent property value.<p>
     * 
     * @param newHasCulturalContent the hasCulturalContent property value to be added
     */
    void addHasCulturalContent(String newHasCulturalContent);

    /**
     * Removes a hasCulturalContent property value.<p>
     * 
     * @param oldHasCulturalContent the hasCulturalContent property value to be removed.
     */
    void removeHasCulturalContent(String oldHasCulturalContent);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasName
     */
     
    /**
     * Gets the value for the hasName functional property.<p>
     * 
     * @returns the value for the hasName property or null
     */
    String getHasName();

    /**
     * Checks if the class has a hasName property value.<p>
     * 
     * @return true if there is a hasName property value.
     */
    boolean hasHasName();

    /**
     * Adds a hasName property value.<p>
     * 
     * @param newHasName the hasName property value to be added
     */
    void addHasName(String newHasName);

    /**
     * Removes a hasName property value.<p>
     * 
     * @param oldHasName the hasName property value to be removed.
     */
    void removeHasName(String oldHasName);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasNameGloss
     */
     
    /**
     * Gets the value for the hasNameGloss functional property.<p>
     * 
     * @returns the value for the hasNameGloss property or null
     */
    String getHasNameGloss();

    /**
     * Checks if the class has a hasNameGloss property value.<p>
     * 
     * @return true if there is a hasNameGloss property value.
     */
    boolean hasHasNameGloss();

    /**
     * Adds a hasNameGloss property value.<p>
     * 
     * @param newHasNameGloss the hasNameGloss property value to be added
     */
    void addHasNameGloss(String newHasNameGloss);

    /**
     * Removes a hasNameGloss property value.<p>
     * 
     * @param oldHasNameGloss the hasNameGloss property value to be removed.
     */
    void removeHasNameGloss(String oldHasNameGloss);



    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasSchemaType
     */
     
    /**
     * Gets all property values for the hasSchemaType property.<p>
     * 
     * @returns a collection of values for the hasSchemaType property.
     */
    Collection<? extends String> getHasSchemaType();

    /**
     * Checks if the class has a hasSchemaType property value.<p>
     * 
     * @return true if there is a hasSchemaType property value.
     */
    boolean hasHasSchemaType();

    /**
     * Adds a hasSchemaType property value.<p>
     * 
     * @param newHasSchemaType the hasSchemaType property value to be added
     */
    void addHasSchemaType(String newHasSchemaType);

    /**
     * Removes a hasSchemaType property value.<p>
     * 
     * @param oldHasSchemaType the hasSchemaType property value to be removed.
     */
    void removeHasSchemaType(String oldHasSchemaType);



    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isApplicableToLanguage
     */
     
    /**
     * Gets all property values for the isApplicableToLanguage property.<p>
     * 
     * @returns a collection of values for the isApplicableToLanguage property.
     */
    Collection<? extends String> getIsApplicableToLanguage();

    /**
     * Checks if the class has a isApplicableToLanguage property value.<p>
     * 
     * @return true if there is a isApplicableToLanguage property value.
     */
    boolean hasIsApplicableToLanguage();

    /**
     * Adds a isApplicableToLanguage property value.<p>
     * 
     * @param newIsApplicableToLanguage the isApplicableToLanguage property value to be added
     */
    void addIsApplicableToLanguage(String newIsApplicableToLanguage);

    /**
     * Removes a isApplicableToLanguage property value.<p>
     * 
     * @param oldIsApplicableToLanguage the isApplicableToLanguage property value to be removed.
     */
    void removeIsApplicableToLanguage(String oldIsApplicableToLanguage);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isFromLanguage
     */
     
    /**
     * Gets the value for the isFromLanguage functional property.<p>
     * 
     * @returns the value for the isFromLanguage property or null
     */
    String getIsFromLanguage();

    /**
     * Checks if the class has a isFromLanguage property value.<p>
     * 
     * @return true if there is a isFromLanguage property value.
     */
    boolean hasIsFromLanguage();

    /**
     * Adds a isFromLanguage property value.<p>
     * 
     * @param newIsFromLanguage the isFromLanguage property value to be added
     */
    void addIsFromLanguage(String newIsFromLanguage);

    /**
     * Removes a isFromLanguage property value.<p>
     * 
     * @param oldIsFromLanguage the isFromLanguage property value to be removed.
     */
    void removeIsFromLanguage(String oldIsFromLanguage);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
