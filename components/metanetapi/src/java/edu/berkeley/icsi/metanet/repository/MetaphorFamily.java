package edu.berkeley.icsi.metanet.repository;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: MetaphorFamily <br>
 * @version generated on Tue Mar 05 15:42:49 PST 2013 by jhong
 */

public interface MetaphorFamily extends WrappedIndividual {

    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasExample
     */
     
    /**
     * Gets all property values for the hasExample property.<p>
     * 
     * @returns a collection of values for the hasExample property.
     */
    Collection<? extends Example> getHasExample();

    /**
     * Checks if the class has a hasExample property value.<p>
     * 
     * @return true if there is a hasExample property value.
     */
    boolean hasHasExample();

    /**
     * Adds a hasExample property value.<p>
     * 
     * @param newHasExample the hasExample property value to be added
     */
    void addHasExample(Example newHasExample);

    /**
     * Removes a hasExample property value.<p>
     * 
     * @param oldHasExample the hasExample property value to be removed.
     */
    void removeHasExample(Example oldHasExample);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasMetaphors
     */
     
    /**
     * Gets all property values for the hasMetaphors property.<p>
     * 
     * @returns a collection of values for the hasMetaphors property.
     */
    Collection<? extends Metaphor> getHasMetaphors();

    /**
     * Checks if the class has a hasMetaphors property value.<p>
     * 
     * @return true if there is a hasMetaphors property value.
     */
    boolean hasHasMetaphors();

    /**
     * Adds a hasMetaphors property value.<p>
     * 
     * @param newHasMetaphors the hasMetaphors property value to be added
     */
    void addHasMetaphors(Metaphor newHasMetaphors);

    /**
     * Removes a hasMetaphors property value.<p>
     * 
     * @param oldHasMetaphors the hasMetaphors property value to be removed.
     */
    void removeHasMetaphors(Metaphor oldHasMetaphors);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isMetaphorSubfamilyOf
     */
     
    /**
     * Gets all property values for the isMetaphorSubfamilyOf property.<p>
     * 
     * @returns a collection of values for the isMetaphorSubfamilyOf property.
     */
    Collection<? extends MetaphorFamily> getIsMetaphorSubfamilyOf();

    /**
     * Checks if the class has a isMetaphorSubfamilyOf property value.<p>
     * 
     * @return true if there is a isMetaphorSubfamilyOf property value.
     */
    boolean hasIsMetaphorSubfamilyOf();

    /**
     * Adds a isMetaphorSubfamilyOf property value.<p>
     * 
     * @param newIsMetaphorSubfamilyOf the isMetaphorSubfamilyOf property value to be added
     */
    void addIsMetaphorSubfamilyOf(MetaphorFamily newIsMetaphorSubfamilyOf);

    /**
     * Removes a isMetaphorSubfamilyOf property value.<p>
     * 
     * @param oldIsMetaphorSubfamilyOf the isMetaphorSubfamilyOf property value to be removed.
     */
    void removeIsMetaphorSubfamilyOf(MetaphorFamily oldIsMetaphorSubfamilyOf);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isMetaphorSuperfamilyOf
     */
     
    /**
     * Gets all property values for the isMetaphorSuperfamilyOf property.<p>
     * 
     * @returns a collection of values for the isMetaphorSuperfamilyOf property.
     */
    Collection<? extends MetaphorFamily> getIsMetaphorSuperfamilyOf();

    /**
     * Checks if the class has a isMetaphorSuperfamilyOf property value.<p>
     * 
     * @return true if there is a isMetaphorSuperfamilyOf property value.
     */
    boolean hasIsMetaphorSuperfamilyOf();

    /**
     * Adds a isMetaphorSuperfamilyOf property value.<p>
     * 
     * @param newIsMetaphorSuperfamilyOf the isMetaphorSuperfamilyOf property value to be added
     */
    void addIsMetaphorSuperfamilyOf(MetaphorFamily newIsMetaphorSuperfamilyOf);

    /**
     * Removes a isMetaphorSuperfamilyOf property value.<p>
     * 
     * @param oldIsMetaphorSuperfamilyOf the isMetaphorSuperfamilyOf property value to be removed.
     */
    void removeIsMetaphorSuperfamilyOf(MetaphorFamily oldIsMetaphorSuperfamilyOf);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasAlias
     */
     
    /**
     * Gets all property values for the hasAlias property.<p>
     * 
     * @returns a collection of values for the hasAlias property.
     */
    Collection<? extends String> getHasAlias();

    /**
     * Checks if the class has a hasAlias property value.<p>
     * 
     * @return true if there is a hasAlias property value.
     */
    boolean hasHasAlias();

    /**
     * Adds a hasAlias property value.<p>
     * 
     * @param newHasAlias the hasAlias property value to be added
     */
    void addHasAlias(Object newHasAlias);

    /**
     * Removes a hasAlias property value.<p>
     * 
     * @param oldHasAlias the hasAlias property value to be removed.
     */
    void removeHasAlias(Object oldHasAlias);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasName
     */
     
    /**
     * Gets the value for the hasName functional property.<p>
     * 
     * @returns the value for the hasName property or null
     */
    String getHasName();

    /**
     * Checks if the class has a hasName property value.<p>
     * 
     * @return true if there is a hasName property value.
     */
    boolean hasHasName();

    /**
     * Adds a hasName property value.<p>
     * 
     * @param newHasName the hasName property value to be added
     */
    void addHasName(String newHasName);

    /**
     * Removes a hasName property value.<p>
     * 
     * @param oldHasName the hasName property value to be removed.
     */
    void removeHasName(String oldHasName);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasNameGloss
     */
     
    /**
     * Gets the value for the hasNameGloss functional property.<p>
     * 
     * @returns the value for the hasNameGloss property or null
     */
    String getHasNameGloss();

    /**
     * Checks if the class has a hasNameGloss property value.<p>
     * 
     * @return true if there is a hasNameGloss property value.
     */
    boolean hasHasNameGloss();

    /**
     * Adds a hasNameGloss property value.<p>
     * 
     * @param newHasNameGloss the hasNameGloss property value to be added
     */
    void addHasNameGloss(String newHasNameGloss);

    /**
     * Removes a hasNameGloss property value.<p>
     * 
     * @param oldHasNameGloss the hasNameGloss property value to be removed.
     */
    void removeHasNameGloss(String oldHasNameGloss);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isFromLanguage
     */
     
    /**
     * Gets the value for the isFromLanguage functional property.<p>
     * 
     * @returns the value for the isFromLanguage property or null
     */
    String getIsFromLanguage();

    /**
     * Checks if the class has a isFromLanguage property value.<p>
     * 
     * @return true if there is a isFromLanguage property value.
     */
    boolean hasIsFromLanguage();

    /**
     * Adds a isFromLanguage property value.<p>
     * 
     * @param newIsFromLanguage the isFromLanguage property value to be added
     */
    void addIsFromLanguage(String newIsFromLanguage);

    /**
     * Removes a isFromLanguage property value.<p>
     * 
     * @param oldIsFromLanguage the isFromLanguage property value to be removed.
     */
    void removeIsFromLanguage(String oldIsFromLanguage);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
