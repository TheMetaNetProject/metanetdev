package edu.berkeley.icsi.metanet.repository;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Example <br>
 * @version generated on Tue Mar 05 15:42:49 PST 2013 by jhong
 */

public interface Example extends WrappedIndividual {

    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasExample
     */
     
    /**
     * Gets all property values for the hasExample property.<p>
     * 
     * @returns a collection of values for the hasExample property.
     */
    Collection<? extends Example> getHasExample();

    /**
     * Checks if the class has a hasExample property value.<p>
     * 
     * @return true if there is a hasExample property value.
     */
    boolean hasHasExample();

    /**
     * Adds a hasExample property value.<p>
     * 
     * @param newHasExample the hasExample property value to be added
     */
    void addHasExample(Example newHasExample);

    /**
     * Removes a hasExample property value.<p>
     * 
     * @param oldHasExample the hasExample property value to be removed.
     */
    void removeHasExample(Example oldHasExample);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isExampleOfMetaphor
     */
     
    /**
     * Gets all property values for the isExampleOfMetaphor property.<p>
     * 
     * @returns a collection of values for the isExampleOfMetaphor property.
     */
    Collection<? extends WrappedIndividual> getIsExampleOfMetaphor();

    /**
     * Checks if the class has a isExampleOfMetaphor property value.<p>
     * 
     * @return true if there is a isExampleOfMetaphor property value.
     */
    boolean hasIsExampleOfMetaphor();

    /**
     * Adds a isExampleOfMetaphor property value.<p>
     * 
     * @param newIsExampleOfMetaphor the isExampleOfMetaphor property value to be added
     */
    void addIsExampleOfMetaphor(WrappedIndividual newIsExampleOfMetaphor);

    /**
     * Removes a isExampleOfMetaphor property value.<p>
     * 
     * @param oldIsExampleOfMetaphor the isExampleOfMetaphor property value to be removed.
     */
    void removeIsExampleOfMetaphor(WrappedIndividual oldIsExampleOfMetaphor);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasAlias
     */
     
    /**
     * Gets all property values for the hasAlias property.<p>
     * 
     * @returns a collection of values for the hasAlias property.
     */
    Collection<? extends String> getHasAlias();

    /**
     * Checks if the class has a hasAlias property value.<p>
     * 
     * @return true if there is a hasAlias property value.
     */
    boolean hasHasAlias();

    /**
     * Adds a hasAlias property value.<p>
     * 
     * @param newHasAlias the hasAlias property value to be added
     */
    void addHasAlias(Object newHasAlias);

    /**
     * Removes a hasAlias property value.<p>
     * 
     * @param oldHasAlias the hasAlias property value to be removed.
     */
    void removeHasAlias(Object oldHasAlias);



    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasAnnotation
     */
     
    /**
     * Gets all property values for the hasAnnotation property.<p>
     * 
     * @returns a collection of values for the hasAnnotation property.
     */
    Collection<? extends String> getHasAnnotation();

    /**
     * Checks if the class has a hasAnnotation property value.<p>
     * 
     * @return true if there is a hasAnnotation property value.
     */
    boolean hasHasAnnotation();

    /**
     * Adds a hasAnnotation property value.<p>
     * 
     * @param newHasAnnotation the hasAnnotation property value to be added
     */
    void addHasAnnotation(String newHasAnnotation);

    /**
     * Removes a hasAnnotation property value.<p>
     * 
     * @param oldHasAnnotation the hasAnnotation property value to be removed.
     */
    void removeHasAnnotation(String oldHasAnnotation);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasName
     */
     
    /**
     * Gets the value for the hasName functional property.<p>
     * 
     * @returns the value for the hasName property or null
     */
    String getHasName();

    /**
     * Checks if the class has a hasName property value.<p>
     * 
     * @return true if there is a hasName property value.
     */
    boolean hasHasName();

    /**
     * Adds a hasName property value.<p>
     * 
     * @param newHasName the hasName property value to be added
     */
    void addHasName(String newHasName);

    /**
     * Removes a hasName property value.<p>
     * 
     * @param oldHasName the hasName property value to be removed.
     */
    void removeHasName(String oldHasName);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasNameGloss
     */
     
    /**
     * Gets the value for the hasNameGloss functional property.<p>
     * 
     * @returns the value for the hasNameGloss property or null
     */
    String getHasNameGloss();

    /**
     * Checks if the class has a hasNameGloss property value.<p>
     * 
     * @return true if there is a hasNameGloss property value.
     */
    boolean hasHasNameGloss();

    /**
     * Adds a hasNameGloss property value.<p>
     * 
     * @param newHasNameGloss the hasNameGloss property value to be added
     */
    void addHasNameGloss(String newHasNameGloss);

    /**
     * Removes a hasNameGloss property value.<p>
     * 
     * @param oldHasNameGloss the hasNameGloss property value to be removed.
     */
    void removeHasNameGloss(String oldHasNameGloss);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasSentence
     */
     
    /**
     * Gets the value for the hasSentence functional property.<p>
     * 
     * @returns the value for the hasSentence property or null
     */
    String getHasSentence();

    /**
     * Checks if the class has a hasSentence property value.<p>
     * 
     * @return true if there is a hasSentence property value.
     */
    boolean hasHasSentence();

    /**
     * Adds a hasSentence property value.<p>
     * 
     * @param newHasSentence the hasSentence property value to be added
     */
    void addHasSentence(String newHasSentence);

    /**
     * Removes a hasSentence property value.<p>
     * 
     * @param oldHasSentence the hasSentence property value to be removed.
     */
    void removeHasSentence(String oldHasSentence);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasSentenceGloss
     */
     
    /**
     * Gets the value for the hasSentenceGloss functional property.<p>
     * 
     * @returns the value for the hasSentenceGloss property or null
     */
    String getHasSentenceGloss();

    /**
     * Checks if the class has a hasSentenceGloss property value.<p>
     * 
     * @return true if there is a hasSentenceGloss property value.
     */
    boolean hasHasSentenceGloss();

    /**
     * Adds a hasSentenceGloss property value.<p>
     * 
     * @param newHasSentenceGloss the hasSentenceGloss property value to be added
     */
    void addHasSentenceGloss(String newHasSentenceGloss);

    /**
     * Removes a hasSentenceGloss property value.<p>
     * 
     * @param oldHasSentenceGloss the hasSentenceGloss property value to be removed.
     */
    void removeHasSentenceGloss(String oldHasSentenceGloss);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasSentenceTranslation
     */
     
    /**
     * Gets the value for the hasSentenceTranslation functional property.<p>
     * 
     * @returns the value for the hasSentenceTranslation property or null
     */
    String getHasSentenceTranslation();

    /**
     * Checks if the class has a hasSentenceTranslation property value.<p>
     * 
     * @return true if there is a hasSentenceTranslation property value.
     */
    boolean hasHasSentenceTranslation();

    /**
     * Adds a hasSentenceTranslation property value.<p>
     * 
     * @param newHasSentenceTranslation the hasSentenceTranslation property value to be added
     */
    void addHasSentenceTranslation(String newHasSentenceTranslation);

    /**
     * Removes a hasSentenceTranslation property value.<p>
     * 
     * @param oldHasSentenceTranslation the hasSentenceTranslation property value to be removed.
     */
    void removeHasSentenceTranslation(String oldHasSentenceTranslation);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isFromLanguage
     */
     
    /**
     * Gets the value for the isFromLanguage functional property.<p>
     * 
     * @returns the value for the isFromLanguage property or null
     */
    String getIsFromLanguage();

    /**
     * Checks if the class has a isFromLanguage property value.<p>
     * 
     * @return true if there is a isFromLanguage property value.
     */
    boolean hasIsFromLanguage();

    /**
     * Adds a isFromLanguage property value.<p>
     * 
     * @param newIsFromLanguage the isFromLanguage property value to be added
     */
    void addIsFromLanguage(String newIsFromLanguage);

    /**
     * Removes a isFromLanguage property value.<p>
     * 
     * @param oldIsFromLanguage the isFromLanguage property value to be removed.
     */
    void removeIsFromLanguage(String oldIsFromLanguage);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
