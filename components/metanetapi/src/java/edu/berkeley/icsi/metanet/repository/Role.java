package edu.berkeley.icsi.metanet.repository;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Role <br>
 * @version generated on Tue Mar 05 15:42:49 PST 2013 by jhong
 */

public interface Role extends WrappedIndividual {

    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasExample
     */
     
    /**
     * Gets all property values for the hasExample property.<p>
     * 
     * @returns a collection of values for the hasExample property.
     */
    Collection<? extends Example> getHasExample();

    /**
     * Checks if the class has a hasExample property value.<p>
     * 
     * @return true if there is a hasExample property value.
     */
    boolean hasHasExample();

    /**
     * Adds a hasExample property value.<p>
     * 
     * @param newHasExample the hasExample property value to be added
     */
    void addHasExample(Example newHasExample);

    /**
     * Removes a hasExample property value.<p>
     * 
     * @param oldHasExample the hasExample property value to be removed.
     */
    void removeHasExample(Example oldHasExample);


    /* ***************************************************
     * Functional Object Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isRoleOfSchema
     */
     
    /**
     * Gets the property value for the isRoleOfSchema functional property.<p>
     * 
     * @returns a value for the isRoleOfSchema property or null
     */
    Schema getIsRoleOfSchema();

    /**
     * Checks if the class has a isRoleOfSchema property value.<p>
     * 
     * @return true if there is a isRoleOfSchema property value.
     */
    boolean hasIsRoleOfSchema();

    /**
     * Adds a isRoleOfSchema property value.<p>
     * 
     * @param newIsRoleOfSchema the isRoleOfSchema property value to be added
     */
    void addIsRoleOfSchema(Schema newIsRoleOfSchema);

    /**
     * Removes a isRoleOfSchema property value.<p>
     * 
     * @param oldIsRoleOfSchema the isRoleOfSchema property value to be removed.
     */
    void removeIsRoleOfSchema(Schema oldIsRoleOfSchema);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#participatesInBinding
     */
     
    /**
     * Gets all property values for the participatesInBinding property.<p>
     * 
     * @returns a collection of values for the participatesInBinding property.
     */
    Collection<? extends Binding> getParticipatesInBinding();

    /**
     * Checks if the class has a participatesInBinding property value.<p>
     * 
     * @return true if there is a participatesInBinding property value.
     */
    boolean hasParticipatesInBinding();

    /**
     * Adds a participatesInBinding property value.<p>
     * 
     * @param newParticipatesInBinding the participatesInBinding property value to be added
     */
    void addParticipatesInBinding(Binding newParticipatesInBinding);

    /**
     * Removes a participatesInBinding property value.<p>
     * 
     * @param oldParticipatesInBinding the participatesInBinding property value to be removed.
     */
    void removeParticipatesInBinding(Binding oldParticipatesInBinding);


    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#correspondsToFrameElement
     */
     
    /**
     * Gets all property values for the correspondsToFrameElement property.<p>
     * 
     * @returns a collection of values for the correspondsToFrameElement property.
     */
    Collection<? extends String> getCorrespondsToFrameElement();

    /**
     * Checks if the class has a correspondsToFrameElement property value.<p>
     * 
     * @return true if there is a correspondsToFrameElement property value.
     */
    boolean hasCorrespondsToFrameElement();

    /**
     * Adds a correspondsToFrameElement property value.<p>
     * 
     * @param newCorrespondsToFrameElement the correspondsToFrameElement property value to be added
     */
    void addCorrespondsToFrameElement(String newCorrespondsToFrameElement);

    /**
     * Removes a correspondsToFrameElement property value.<p>
     * 
     * @param oldCorrespondsToFrameElement the correspondsToFrameElement property value to be removed.
     */
    void removeCorrespondsToFrameElement(String oldCorrespondsToFrameElement);



    /* ***************************************************
     * Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasAlias
     */
     
    /**
     * Gets all property values for the hasAlias property.<p>
     * 
     * @returns a collection of values for the hasAlias property.
     */
    Collection<? extends String> getHasAlias();

    /**
     * Checks if the class has a hasAlias property value.<p>
     * 
     * @return true if there is a hasAlias property value.
     */
    boolean hasHasAlias();

    /**
     * Adds a hasAlias property value.<p>
     * 
     * @param newHasAlias the hasAlias property value to be added
     */
    void addHasAlias(Object newHasAlias);

    /**
     * Removes a hasAlias property value.<p>
     * 
     * @param oldHasAlias the hasAlias property value to be removed.
     */
    void removeHasAlias(Object oldHasAlias);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasDefinition
     */
     
    /**
     * Gets the value for the hasDefinition functional property.<p>
     * 
     * @returns the value for the hasDefinition property or null
     */
    String getHasDefinition();

    /**
     * Checks if the class has a hasDefinition property value.<p>
     * 
     * @return true if there is a hasDefinition property value.
     */
    boolean hasHasDefinition();

    /**
     * Adds a hasDefinition property value.<p>
     * 
     * @param newHasDefinition the hasDefinition property value to be added
     */
    void addHasDefinition(String newHasDefinition);

    /**
     * Removes a hasDefinition property value.<p>
     * 
     * @param oldHasDefinition the hasDefinition property value to be removed.
     */
    void removeHasDefinition(String oldHasDefinition);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasName
     */
     
    /**
     * Gets the value for the hasName functional property.<p>
     * 
     * @returns the value for the hasName property or null
     */
    String getHasName();

    /**
     * Checks if the class has a hasName property value.<p>
     * 
     * @return true if there is a hasName property value.
     */
    boolean hasHasName();

    /**
     * Adds a hasName property value.<p>
     * 
     * @param newHasName the hasName property value to be added
     */
    void addHasName(String newHasName);

    /**
     * Removes a hasName property value.<p>
     * 
     * @param oldHasName the hasName property value to be removed.
     */
    void removeHasName(String oldHasName);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasNameGloss
     */
     
    /**
     * Gets the value for the hasNameGloss functional property.<p>
     * 
     * @returns the value for the hasNameGloss property or null
     */
    String getHasNameGloss();

    /**
     * Checks if the class has a hasNameGloss property value.<p>
     * 
     * @return true if there is a hasNameGloss property value.
     */
    boolean hasHasNameGloss();

    /**
     * Adds a hasNameGloss property value.<p>
     * 
     * @param newHasNameGloss the hasNameGloss property value to be added
     */
    void addHasNameGloss(String newHasNameGloss);

    /**
     * Removes a hasNameGloss property value.<p>
     * 
     * @param oldHasNameGloss the hasNameGloss property value to be removed.
     */
    void removeHasNameGloss(String oldHasNameGloss);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#hasRoleType
     */
     
    /**
     * Gets the value for the hasRoleType functional property.<p>
     * 
     * @returns the value for the hasRoleType property or null
     */
    String getHasRoleType();

    /**
     * Checks if the class has a hasRoleType property value.<p>
     * 
     * @return true if there is a hasRoleType property value.
     */
    boolean hasHasRoleType();

    /**
     * Adds a hasRoleType property value.<p>
     * 
     * @param newHasRoleType the hasRoleType property value to be added
     */
    void addHasRoleType(String newHasRoleType);

    /**
     * Removes a hasRoleType property value.<p>
     * 
     * @param oldHasRoleType the hasRoleType property value to be removed.
     */
    void removeHasRoleType(String oldHasRoleType);



    /* ***************************************************
     * Functional Data Property https://metaphor.icsi.berkeley.edu/metaphor/MetaphorOntology.owl#isFromLanguage
     */
     
    /**
     * Gets the value for the isFromLanguage functional property.<p>
     * 
     * @returns the value for the isFromLanguage property or null
     */
    String getIsFromLanguage();

    /**
     * Checks if the class has a isFromLanguage property value.<p>
     * 
     * @return true if there is a isFromLanguage property value.
     */
    boolean hasIsFromLanguage();

    /**
     * Adds a isFromLanguage property value.<p>
     * 
     * @param newIsFromLanguage the isFromLanguage property value to be added
     */
    void addIsFromLanguage(String newIsFromLanguage);

    /**
     * Removes a isFromLanguage property value.<p>
     * 
     * @param oldIsFromLanguage the isFromLanguage property value to be removed.
     */
    void removeIsFromLanguage(String oldIsFromLanguage);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
