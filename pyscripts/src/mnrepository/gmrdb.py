#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
.. module:: gmrdb
    :platform: Unix
    :synopsis: ORM-based module (via peewee) for interacting with IARPA GMR database

Contains autogenerated classes (via :py:mod:`peewee`) that mirrors the structure of the database,
and higher-level methods for accessing the database to retrieve concept labels, and to insert
LMs and CMs.

.. moduleauthor:: Jisup <jhong@icsi.berkeley.edu>
"""
from peewee import *
from playhouse.proxy import Proxy
import sys, os
import re
import cPickle as pickle
from collections import Counter
import logging

gmrdatabase_proxy = Proxy()

class UnknownFieldType(object):
    pass

class BaseModel(Model):
    class Meta:
        database = gmrdatabase_proxy

class Admin(BaseModel):
    comments = TextField(null=True)
    date = DateField()
    owner = CharField(max_length=4)
    schema_version = DecimalField()

    class Meta:
        db_table = 'admin'

class Case(BaseModel):
    description = TextField()
    name = CharField(max_length=45)

    class Meta:
        db_table = 'case'

class Cm_Source(BaseModel):
    source_concept = CharField(max_length=45)
    source_definition = TextField()
    source_family = CharField(max_length=45, null=True)
    source_name_es = CharField(max_length=45, null=True)
    source_name_fa = CharField(max_length=45, null=True)
    source_name_ru = CharField(max_length=45, null=True)
    source_owner = CharField(max_length=4)

    class Meta:
        db_table = 'cm_source'

class Protagonist(BaseModel):
    case = ForeignKeyField(db_column='case_id', rel_model=Case)
    description = TextField()
    name = CharField(max_length=45)
    owner = CharField(max_length=4)

    class Meta:
        db_table = 'protagonist'

class Cm_Target_General(BaseModel):
    cultural_concept = CharField(max_length=19)
    target_concept = CharField(max_length=45)
    target_name_es = CharField(max_length=45, null=True)
    target_name_fa = CharField(max_length=45, null=True)
    target_name_ru = CharField(max_length=45, null=True)
    target_owner = CharField(max_length=4)

    class Meta:
        db_table = 'cm_target_general'

class Cm_Target_Case(BaseModel):
    case_concept = CharField(max_length=13)
    target_concept = CharField(max_length=45)
    target_owner = CharField(max_length=4)

    class Meta:
        db_table = 'cm_target_case'

class Cm_General(BaseModel):
    cm_target_general = ForeignKeyField(db_column='cm_target_general_id', rel_model=Cm_Target_General)
    cm_source = ForeignKeyField(db_column='cm_source_id', rel_model=Cm_Source)
    language = CharField(max_length=2)
    protagonist = ForeignKeyField(db_column='protagonist_id', rel_model=Protagonist)


    class Meta:
        db_table = 'cm_general'

class Cm_Case(BaseModel):
    cm_target_case = ForeignKeyField(db_column='cm_target_case_id', rel_model=Cm_Target_Case)
    cm_source = ForeignKeyField(db_column='cm_source_id', rel_model=Cm_Source)
    language = CharField(max_length=2)
    protagonist = ForeignKeyField(db_column='protagonist_id', rel_model=Protagonist)

    class Meta:
        db_table = 'cm_case'

class Cm_General_Property(BaseModel):
    cm = ForeignKeyField(db_column='cm_id', rel_model=Cm_General)
    name = CharField(max_length=255)
    value = CharField(max_length=45)
    nvalue = FloatField(null=True)
    
    class Meta:
        db_table = 'cm_general_property'

class Cm_Case_Property(BaseModel):
    cm = ForeignKeyField(db_column='cm_id', rel_model=Cm_Case)
    name = CharField(max_length=255)
    value = CharField(max_length=45)
    nvalue = FloatField(null=True)
    
    class Meta:
        db_table = 'cm_case_property'


class Lm_Sentence(BaseModel):
    doc_date = DateField()
    language = CharField(max_length=2)
    text = TextField()
    type = CharField(max_length=17)
    url = CharField(max_length=120)

    class Meta:
        db_table = 'lm_sentence'

class Lm(BaseModel):
    extid = BigIntegerField(null=True)
    language = CharField(max_length=2)
    lm_sentence = ForeignKeyField(db_column='lm_sentence_id', rel_model=Lm_Sentence)
    lm_source = CharField(max_length=45)
    lm_source_lemma = CharField(max_length=45)
    lm_target = CharField(max_length=45)
    protagonist = ForeignKeyField(db_column='protagonist_id', rel_model=Protagonist)

    class Meta:
        db_table = 'lm'

class Lm2Cm_Source(BaseModel):
    cm_source = ForeignKeyField(db_column='cm_source_id', rel_model=Cm_Source)
    confidence = CharField(max_length=6)
    lm = ForeignKeyField(db_column='lm_id', rel_model=Lm)

    class Meta:
        db_table = 'lm2cm_source'

class Lm2Cm_Target_Case(BaseModel):
    cm_target_case = ForeignKeyField(db_column='cm_target_case_id', rel_model=Cm_Target_Case)
    lm = ForeignKeyField(db_column='lm_id', rel_model=Lm)

    class Meta:
        db_table = 'lm2cm_target_case'

class Lm2Cm_Target_General(BaseModel):
    cm_target_general = ForeignKeyField(db_column='cm_target_general_id', rel_model=Cm_Target_General)
    lm = ForeignKeyField(db_column='lm_id', rel_model=Lm)

    class Meta:
        db_table = 'lm2cm_target_general'

class Lm_Property(BaseModel):
    lm = ForeignKeyField(db_column='lm_id', rel_model=Lm)
    name = CharField(max_length=45)
    value = CharField(max_length=45)
    nvalue = FloatField(null=True)

    class Meta:
        db_table = 'lm_property'


        
class Cm2Lm_Core_Case(BaseModel):
    cm = ForeignKeyField(db_column='cm_id', rel_model=Cm_Case)
    lm = ForeignKeyField(db_column='lm_id', rel_model=Lm)
    core_score = FloatField(null=False)

    class Meta:
        db_table = 'cm2lm_core_case'

class Cm2Lm_Core_General(BaseModel):
    cm = ForeignKeyField(db_column='cm_id', rel_model=Cm_General)
    lm = ForeignKeyField(db_column='lm_id', rel_model=Lm)
    core_score = FloatField(null=False)

    class Meta:
        db_table = 'cm2lm_core_general'


#
# ======================================================================================
# ======================================================================================
#
    
class GMRDB:
    """ Class for accessing the GMR database.  Currently fixed on MySQL.
    """
    def __init__(self, host=None, socket=None, user=None, passwd=None, dbname='icsi_gmr_21'):
        """
        :param host: database host name (currently unused)
        :type host: str
        :param socket: database socket
        :type socket: str
        :param user: database user name
        :type user: str
        :param passwd: database password
        :type passwd: str
        :param dbname: name of database
        :type dbname: str
        :param targetmode: target concept mode (general, case)
        :type targetmode: str
        """
        global gmrdatabase_proxy
        mydb = MySQLDatabase(dbname, **{'passwd':passwd,
                                        'unix_socket':socket,
                                        'user':user,
                                        'charset':'utf8',
                                        'use_unicode':True})
        gmrdatabase_proxy.initialize(mydb)
        gmrdatabase_proxy.connect()
        self.logger = logging.getLogger(__name__)
        self.targetconceptgenerallookupcache = {}
        self.targetconceptcaselookupcache = {}
        self.sourceconceptlookupcache = {}
        self.protlookupcache = {}
        self.protnamelookupcache = {}
        self.tcongennamecache = {}
        self.tconcasenamecache = {}
        self.sconnamecache = {}
    
    def getConceptGroupNamesCase(self):
        cursor = gmrdatabase_proxy.execute_sql("SHOW COLUMNS FROM cm_target_case WHERE Field='case_concept';")
        row = cursor.fetchone()
        groupfield = row[1]
        groupNames = groupfield[6:-2].split(u',')
        return groupNames

    def getConceptGroupNamesGeneral(self):
        cursor = gmrdatabase_proxy.execute_sql("SHOW COLUMNS FROM cm_target_general WHERE Field='cultural_concept';")
        row = cursor.fetchone()
        groupfield = row[1]
        # this is to strip off enum( ), and that each name is in ''
        groupNames = [gn[1:-1] for gn in groupfield[5:-1].split(u',')]
        return groupNames
    
    def getProtagonistId(self, protagonist):
        """ Retrieve ID number of protagonist """
        if protagonist in self.protlookupcache:
            return self.protlookupcache[protagonist]
        try:
            prot = Protagonist.get(Protagonist.name==protagonist)
            if prot.id:
                self.protlookupcache[protagonist] = prot.id
            return prot.id
        except DoesNotExist:
            self.logger.warn('protagonist %s does not exist.  Using GENERAL.',protagonist)
            return 1
    
    def getProtagonistName(self, protid):
        """ Retrieve protagonist name from ID """
        if protid in self.protnamelookupcache:
            return self.protnamelookupcache[protid]
        try:
            prot = Protagonist.get(Protagonist.id==protid)
            if prot.name:
                self.protnamelookupcache[protid] = prot.name
            return prot.name
        except DoesNotExist:
            self.logger.warn('protagonist with id %d does not exist.  Using GENERAL.',protid)
            return 'GENERAL'
    
    def getTargetConceptGeneralName(self, tconid):
        """ Retrieve target concept name from ID """
        if tconid in self.tcongennamecache:
            return self.tcongennamecache[tconid]
        try:
            cmt = Cm_Target_General.get(Cm_Target_General.id==tconid)
            if cmt.target_concept:
                self.tcongennamecache[tconid] = cmt.target_concept
            return cmt.target_concept
        except DoesNotExist:
            self.logger.warn('Cm_Target_General with id %d does not exist.', tconid)
            raise

    def getTargetConceptCaseName(self, tconid):
        """ Retrieve target concept name from ID """
        if tconid in self.tconcasenamecache:
            return self.tconcasenamecache[tconid]
        try:
            cmt = Cm_Target_Case.get(Cm_Target_Case.id==tconid)
            if cmt.target_concept:
                self.tconcasenamecache[tconid] = cmt.target_concept
            return cmt.target_concept
        except DoesNotExist:
            self.logger.warn('Cm_Target_Case with id %d does not exist.', tconid)
            raise
    
    def getSourceConceptName(self, sconid):
        """ Retrieve target concept name from ID """
        if sconid in self.sconnamecache:
            return self.sconnamecache[sconid]
        try:
            cms = Cm_Source.get(Cm_Source.id==sconid)
            if cms.source_concept:
                self.sconnamecache[sconid] = cms.source_concept
            return cms.source_concept
        except DoesNotExist:
            self.logger.warn('Cm_Source with id %d does not exist.', sconid)
            raise
    
 
    def update_lm_sent(self,lang,text,url,doctype):
        """ Update LM sentence """
        try:
            lm_sent = Lm_Sentence.get(Lm_Sentence.url == url)
        except DoesNotExist:
            lm_sent = Lm_Sentence()
            lm_sent.text = text
            if len(url) > 120:
                extid = url[-120:]
            else:
                extid = url
            lm_sent.url = extid
            lm_sent.type = doctype
            lm_sent.language = lang
            lm_sent.save()
        return lm_sent
    
    def update_lm(self,lang,extid,target,source,tconcept,lmsent):
        """ Update an LM (note that this corresponds to LM instance in the metanet db). """
        try:
            lm = Lm.get(Lm.extid == extid)
        except DoesNotExist:
            lm = Lm()
            lm.language = lang
            lm.extid = extid
            lm.lm_sentence = lmsent
            lm.lm_target = target
            lm.lm_source = source
            lm.cm_target = tconcept
            lm.save()
        return lm
    
    def insert_lm2cm_source(self,lm,cmsource):
        try:
            lm2cm = Lm2Cm_Source.create(lm=lm,cm_source=cmsource)
        except:
            self.logger.error("Could not link lm to cm")
            raise

    def insert_cm_case(self,lang,cmsource,protagonist):
        """ Insert a CM into the database for case."""
        try:
            cm = Cm_Case.create(cm_source=cmsource,language=lang,protagonist=protagonist)
        except:
            self.logger.error("Could not insert CM case")
            raise

    def insert_cm_general(self,lang,cmsource,protagonist):
        """ Insert a CM into the database for general."""
        try:
            cm = Cm_General.create(cm_source=cmsource,language=lang,protagonist=protagonist)
        except:
            self.logger.error("Could not insert CM general")
            raise
        
    def insert_cm2lm_core_general(self,cm,lm,score):
        """ Insert a cm2lm_core score into the database for general."""
        try:
            return Cm2Lm_Core_General.create(cm=cm,lm=lm,core_score=score)
        except:
            self.logger.error("Could not insert cm2lm_core_general")
            raise
        
    def insert_cm2lm_core_case(self,cm,lm,score):
        """ Insert a cm2lm_core score into the database for case."""
        try:
            return Cm2Lm_Core_Case.create(cm=cm,lm=lm,core_score=score)
        except:
            self.logger.error("Could not insert cm2lm_core_case")
            raise
        
    def getTargetConceptGeneral(self,lang,tcon):
        """
        Since none of the concept labels are given in a language
        besides English, we only need to look up the English table
        """
        try:
            return Cm_Target_General.get(Cm_Target_General.target_concept==tcon)
        except:
            self.logger.error(u'Error: getTargetConceptGeneral(%s,%s)',lang,tcon)
            raise
    
    def getTargetConceptCase(self,lang,tcon):
        """
        Since none of the concept labels are given in a language
        besides English, we only need to look up the English table
        """
        try:
            return Cm_Target_Case.get(Cm_Target_Case.target_concept==tcon)
        except:
            self.logger.error(u'Error: getTargetConceptCase(%s,%s)',lang,tcon)
            raise
   
    def getTargetConceptsGeneral(self):
        return Cm_Target_General.select()
    
    def getTargetConceptsCase(self):
        return Cm_Target_Case.select()

    def getGovTargetConceptsGeneral(self):
        """ Retrieve target concepts owned by the government"""
        return Cm_Target_General.select(Cm_Target_General.target_owner=='GOV')

    def getGovTargetConceptsCase(self):
        """ Retrieve target concepts owned by the government"""
        return Cm_Target_Case.select(Cm_Target_Case.target_owner=='GOV')

    def getCMSourcesFromTargetGeneral(self, lang, tcon, prot=None):
        if prot:
            return Cm_Source().select().join(Cm_General).join(Protagonist).where((Cm_General.cm_target_general==tcon) & (Cm_General.language==lang) & (Protagonist.name==prot))
        else:
            return Cm_Source().select().join(Cm_General).where((Cm_General.cm_target_general==tcon) & (Cm_General.language==lang))

    def getCMSourcesFromTargetCase(self, lang, tcon, prot=None):
        if prot:
            return Cm_Source().select().join(Cm_Case).join(Protagonist).where((Cm_Case.cm_target_case==tcon) & (Cm_Case.language==lang) & (Protagonist.name==prot))
        else:
            return Cm_Source().select().join(Cm_Case).where((Cm_Case.cm_target_case==tcon) & (Cm_Case.language==lang))
    # SJD gets ValueError: No foreign key between <class 'mnrepository.gmrdb.Lm2Cm_Source'> and <class 'mnrepository.gmrdb.Lm2Cm_Target_General'> ? 
    def getLMsFromTargetGeneralSource(self, lang, tcon, scon, prot=None):
        if prot:
            return Lm.select().join(Lm2Cm_Source).join(Lm2Cm_Target_General).switch(Lm).join(Protagonist).where((Lm2Cm_Target_General.cm_target_general==tcon) & (Lm2Cm_Source.cm_source==scon) & (Lm.language==lang) & (Protagonist.name==prot))
        else:
            return Lm.select().join(Lm2Cm_Source).join(Lm2Cm_Target_General).where((Lm2Cm_Target_General.cm_target_general==tcon) & (Lm2Cm_Source.cm_source==scon) & (Lm.language==lang))
    
    def getLMsFromTargetCaseSource(self, lang, tcon, scon, prot=None):
        if prot:
            return Lm.select().join(Lm2Cm_Source).join(Lm2Cm_Target_Case).switch(Lm).join(Protagonist).where((Lm2Cm_Target_Case.cm_target_case==tcon) & (Lm2Cm_Source.cm_source==scon) & (Lm.language==lang) & (Protagonist.name==prot))
        else:
            return Lm.select().join(Lm2Cm_Source).join(Lm2Cm_Target_Case).where((Lm2Cm_Target_Case.cm_target_case==tcon) & (Lm2Cm_Source.cm_source==scon) & (Lm.language==lang))
    
    def getLMsFromConceptGroupCase(self, lang, tcgroup):
        
        return (Lm.select(
                    Lm.id,
                    Lm.extid,
                    Lm.lm_target,
                    Lm.lm_source,
                    Lm.protagonist,
                    Cm_Target_Case.case_concept,
                    Cm_Target_Case.target_concept,
                    Cm_Target_Case.target_owner,
                    Cm_Source.source_concept,
                    Cm_Source.source_owner,
                    Cm_Case.protagonist,
                    Lm_Sentence.url,
                    Lm_Sentence.text
                ).join(Lm2Cm_Source)
                    .join(Cm_Source)
                    .join(Cm_Case)
                    .switch(Lm)
                    .join(Lm_Sentence)
                    .switch(Lm)
                    .join(Lm2Cm_Target_Case)
                    .join(Cm_Target_Case)
                    .join(Cm_Case)
                .where((Cm_Target_Case.case_concept==tcgroup) &
                        (Cm_Case.language==lang)))
    
    def getLMsFromConceptGroupGeneral(self, lang, tcgroup):
        return (Lm.select(
                    Lm.id,
                    Lm.extid,
                    Lm.lm_target,
                    Lm.lm_source,
                    Lm.protagonist,
                    Cm_Target_General.cultural_concept,
                    Cm_Target_General.target_concept,
                    Cm_Target_General.target_owner,
                    Cm_Source.source_concept,
                    Cm_Source.source_owner,
                    Cm_General.protagonist,
                    Lm_Sentence.url,
                    Lm_Sentence.text
                ).join(Lm2Cm_Source)
                    .join(Cm_Source)
                    .join(Cm_Target)
                    .switch(Lm)
                    .join(Lm_Sentence)
                    .switch(Lm)
                    .join(Lm2Cm_Target_General)
                    .join(Cm_Target_General)
                    .join(Cm_General)
                .where((Cm_Target_General.cultural_concept==tcgroup) &
                        (Cm_Case.language==lang)))
        
    def getCountLMsFromTargetGeneralSource(self, lang, tcon, scon, prot=None):
        if prot:
            return Lm.select(fn.Count(Lm.id)).join(Lm2Cm_Source).switch(Lm).join(Lm2Cm_Target_General).switch(Lm).join(Protagonist).where((Lm2Cm_Target_General.cm_target_general==tcon) & (Lm2Cm_Source.cm_source==scon) & (Lm.language==lang) & (Protagonist.name==prot)).scalar()
        else:
            return Lm.select(fn.Count(Lm.id)).join(Lm2Cm_Source).switch(Lm).join(Lm2Cm_Target_General).where((Lm2Cm_Target_General.cm_target_general==tcon) & (Lm2Cm_Source.cm_source==scon) & (Lm.language==lang)).scalar()

    def getCountLMsFromTargetCaseSource(self, lang, tcon, scon, prot=None):
        if prot:
            return Lm.select(fn.Count(Lm.id)).join(Lm2Cm_Source).switch(Lm).join(Lm2Cm_Target_Case).switch(Lm).join(Protagonist).where((Lm2Cm_Target_Case.cm_target_case==tcon) & (Lm2Cm_Source.cm_source==scon) & (Lm.language==lang) & (Protagonist.name==prot)).scalar()
        else:
            return Lm.select(fn.Count(Lm.id)).join(Lm2Cm_Source).switch(Lm).join(Lm2Cm_Target_Case).where((Lm2Cm_Target_Case.cm_target_case==tcon) & (Lm2Cm_Source.cm_source==scon) & (Lm.language==lang)).scalar()
    
    def getCMCountByTargetConceptGeneralLang(self, tcon, lang, prot=None):
        if prot:
            return Cm_General.select(fn.Count(Cm_General.id)).join(Protagonist).where((Cm_General.cm_target_general==tcon) & (Cm_General.language==lang) & (Protagonist.name==prot)).scalar()
        else:
            return Cm_General.select(fn.Count(Cm_General.id)).where((Cm_General.cm_target_general==tcon) & (Cm_General.language==lang)).scalar()

    def getCMCountByTargetConceptCaseLang(self, tcon, lang, prot=None):
        if prot:
            return Cm_Case.select(fn.Count(Cm_Case.id)).join(Protagonist).where((Cm_Case.cm_target_case==tcon) & (Cm_Case.language==lang) & (Protagonist.name==prot)).scalar()
        else:
            return Cm_Case.select(fn.Count(Cm_Case.id)).where((Cm_Case.cm_target_case==tcon) & (Cm_Case.language==lang)).scalar()
 
    # SJD: next set of methods provide "core lexical support"
    
    # SJD:  return result set of cm.id, lang, and the source and target concept names.  fn.Substr (return the whole string) and alias used to make select terms be added as attributes to the object being returned.  Otherwise, seem to have to use an existing attribute, e.g. "cm_target_general" (which then instantiates an actual Cm_Target_General, making the reference x.cm_target_general.target)   
    def getCMidLangSourceTargetGeneral(self):
        return Cm_General.select((Cm_General.id).alias('id'),(Cm_General.language).alias('language'), fn.Substr(Cm_Source.source_concept, 1).alias('source'), fn.Substr(Cm_Target_General.target_concept, 1).alias('target')).join(Cm_Target_General).switch(Cm_General).join(Cm_Source)

    def getCMidLangSourceTargetCase(self):
        return Cm_Case.select((Cm_Case.id).alias('id'),(Cm_Case.language).alias('language'), fn.Substr(Cm_Source.source_concept, 1).alias('source'), fn.Substr(Cm_Target_Case.target_concept, 1).alias('target')).join(Cm_Target_Case).switch(Cm_Case).join(Cm_Source)

    # SJD:  for a given language, and source concept, target concept returns result set of cm, property value and mapping score. 
    def getCMFromSourceTargetLangGeneral(self, lang, sconname, tconname):
        return Cm_General_Property.select().join(Cm_General).join(Cm_Source).switch(Cm_General).join(Cm_Target_General).where((Cm_Target_General.target_concept==tconname) & (Cm_Source.source_concept==sconname) & (Cm_General.language==lang) )
 
    def getCMFromSourceTargetLangCase(self, lang, sconname, tconname):
        return Cm_Case_Property.select().join(Cm_Case).join(Cm_Source).switch(Cm_Case).join(Cm_Target_Case).where((Cm_Target_Case.target_concept==tconname) & (Cm_Source.source_concept==sconname) & (Cm_Case.language==lang) )
 
    # SJD: metaphoricity score. 
    # This method apparently causes some versions of Eclipse to hang.
    def getScoreFromCmLangPropertyGeneral(self, cm, lang, propertyvalue):
        Property_Value = Lm_Property.alias()
        return (Lm.select(fn.Min(Lm.id).alias('minId'),
             fn.Max(Property_Value.nvalue).alias('nvalue'), 
             Lm.lm_source_lemma)
             .join(Lm2Cm_Source)
             .join(Cm_Source).switch(Lm)
             .join(Lm2Cm_Target_General)
             .switch(Lm2Cm_Target_General).join(Cm_Target_General)
             .switch(Cm_Target_General).join(Cm_General)
             .switch(Lm).join(Lm_Property)
             .switch(Lm).join(Property_Value, on=(Property_Value.lm==Lm.id))
             .where((Cm_General.cm_source==Lm2Cm_Source.cm_source) & 
             (Cm_General.id==cm) & (Lm.language==lang) & 
             (Lm2Cm_Target_General.lm==Lm2Cm_Source.lm) & 
             (Lm.id==Lm2Cm_Target_General.lm) & 
             (Lm_Property.value==propertyvalue) &
             (Lm_Property.name=='hasSourceFrame') &
             (Property_Value.name=='hasMetaScore')) 
             .group_by(Lm.lm_source_lemma))

    # SJD: metaphoricity score. 
    # This method apparently causes some versions of Eclipse to hang.
    def getScoreFromCmLangPropertyCase(self, cm, lang, propertyvalue):
        Property_Value = Lm_Property.alias()
        return (Lm.select(fn.Min(Lm.id).alias('minId'),
             fn.Max(Property_Value.nvalue).alias('nvalue'), 
             Lm.lm_source_lemma)
             .join(Lm2Cm_Source)
             .join(Cm_Source).switch(Lm)
             .join(Lm2Cm_Target_Case)
             .switch(Lm2Cm_Target_Case).join(Cm_Target_Case)
             .switch(Cm_Target_Case).join(Cm_Case)
             .switch(Lm).join(Lm_Property)
             .switch(Lm).join(Property_Value, on=(Property_Value.lm==Lm.id))
             .where((Cm_Case.cm_source==Lm2Cm_Source.cm_source) & 
             (Cm_Case.id==cm) & (Lm.language==lang) & 
             (Lm2Cm_Target_Case.lm==Lm2Cm_Source.lm) & 
             (Lm.id==Lm2Cm_Target_Case.lm) & 
             (Lm_Property.value==propertyvalue) &
             (Lm_Property.name=='hasSourceFrame') &
             (Property_Value.name=='hasMetaScore')) 
             .group_by(Lm.lm_source_lemma))

       
    def getTargetConceptGeneralId(self, tcon, cultcon=None):
        """
        Retrieve target concept id number from the target concept name.  Cache in a hash.
        """
        if tcon in self.targetconceptgenerallookupcache:
            return self.targetconceptgenerallookupcache[tcon]
        else:
            try:
                tconcept = Cm_Target_General.get(Cm_Target_General.target_concept==tcon)
                self.targetconceptgenerallookupcache[tcon] = tconcept.id
                return tconcept.id
            except DoesNotExist:
                if cultcon:
                    try:
                        tconcept = Cm_Target_General.create(target_concept=tcon,
                                                            cultural_concept=cultcon.replace(' ','_'),
                                                            target_owner='ICSI')                
                    except IntegrityError:
                        # this is in case it was inserted by another process; try retrieving it
                        tconcept = Cm_Target_General.get(Cm_Target_General.target_concept==tcon)
                    except:
                        self.logger.error(u'Error: could not get or create tconcept %s with cultcon %s', tcon, cultcon)
                        return None
                else:
                    self.logger.error("Error: tconcept %s does not exist",tcon)
                    return None
        return None
    
    def getTargetConceptCaseId(self, tcon, casecon=None):
        """
        Retrieve target concept id number from the target concept name.  Cache in a hash.
        """
        if tcon in self.targetconceptcaselookupcache:
            return self.targetconceptcaselookupcache[tcon]
        else:
            try:
                tconcept = Cm_Target_Case.get(Cm_Target_Case.target_concept==tcon)
                self.targetconceptcaselookupcache[tcon] = tconcept.id
                return tconcept.id
            except DoesNotExist:
                if casecon:
                    try:
                        tconcept = Cm_Target_Case.create(target_concept=tcon,
                                                         case_concept=casecon.replace(' ','_'),
                                                         target_owner='ICSI')                
                    except IntegrityError:
                        # this is in case it was inserted by another process; try retrieving it
                        tconcept = Cm_Target_Case.get(Cm_Target_Case.target_concept==tcon)
                    except:
                        self.logger.error(u'Error: could not get or create tconcept %s with casecon %s', tcon, casecon)
                        return None
                else:
                    self.logger.error("Error: tconcept %s does not exist",tcon)
                    return None
        return None
    
    def getLMLexicalCountsGeneral(self, lang, tcon):
        """
        Retrieve source concepts and LU counts
        """
        return Lm.select(Lm.lm_source_lemma,fn.Count(Lm.id).alias('count')).join(Lm2Cm_Target_General).where((Lm.language==lang) & (Lm2Cm_Target_General.cm_target_general==tcon)).group_by(Lm.lm_source_lemma)

    def getLMLexicalCountsCase(self, lang, tcon):
        """
        Retrieve source concepts and LU counts
        """
        return Lm.select(Lm.lm_source_lemma,fn.Count(Lm.id).alias('count')).join(Lm2Cm_Target_Case).where((Lm.language==lang) & (Lm2Cm_Target_Case.cm_target_case==tcon)).group_by(Lm.lm_source_lemma)

    def getCMLexicalCountsGeneral(self, lang, tcon, scon,prot=None):
        """
        Retrieve source concepts and LU counts
        """
        if prot:
            return Lm.select(Lm.lm_source_lemma,fn.Count(Lm.id).alias('count')).join(Lm2Cm_Source).switch(Lm).join(Lm2Cm_Target_General).switch(Lm).join(Protagonist).where((Lm.language==lang) & (Lm2Cm_Target_General.cm_target_general==tcon) & (Lm2Cm_Source.cm_source==scon) & (Protagonist.name==prot)).group_by(Lm.lm_source_lemma)
        else:
            return Lm.select(Lm.lm_source_lemma,fn.Count(Lm.id).alias('count')).join(Lm2Cm_Source).switch(Lm).join(Lm2Cm_Target_General).where((Lm.language==lang) & (Lm2Cm_Target_General.cm_target_general==tcon) & (Lm2Cm_Source.cm_source==scon)).group_by(Lm.lm_source_lemma)

    def getCMLexicalCountsCase(self, lang, tcon, scon,prot=None):
        """
        Retrieve source concepts and LU counts
        """
        if prot:
            return Lm.select(Lm.lm_source_lemma,fn.Count(Lm.id).alias('count')).join(Lm2Cm_Source).switch(Lm).join(Lm2Cm_Target_Case).switch(Lm).join(Protagonist).where((Lm.language==lang) & (Lm2Cm_Target_Case.cm_target_case==tcon) & (Lm2Cm_Source.cm_source==scon) & (Protagonist.name==prot)).group_by(Lm.lm_source_lemma)
        else:
            return Lm.select(Lm.lm_source_lemma,fn.Count(Lm.id).alias('count')).join(Lm2Cm_Source).switch(Lm).join(Lm2Cm_Target_Case).where((Lm.language==lang) & (Lm2Cm_Target_Case.cm_target_case==tcon) & (Lm2Cm_Source.cm_source==scon)).group_by(Lm.lm_source_lemma)


    def getSourceConceptsFromLMSource(self, lm_source):
        return Lm2Cm_Source.select(Lm2Cm_Source.cm_source).join(Lm).where(Lm.lm_source_lemma==lm_source)


    def getSourceConceptId(self, scon, definition=""):
        """
        Retrieve target concept id number from the target concept name.  Cache in a hash.
        """
        if scon in self.sourceconceptlookupcache:
            return self.sourceconceptlookupcache[scon]
        try:
            sconcept = Cm_Source.get(Cm_Source.source_concept==scon)
        except DoesNotExist:
            try:
                sconcept = Cm_Source.create(source_concept=scon,source_definition=definition,
                                            source_owner='ICSI')                
            except IntegrityError:
                # this is in case it was inserted by another process
                sconcept = Cm_Source.get(Cm_Source.source_concept==scon)
            except:
                self.logger.error(u'Error: could not get or create source concept: %s',scon)
                raise
        self.sourceconceptlookupcache[scon] = sconcept.id
        return sconcept.id
    
    def getSourceConcepts(self,lang, sconlist):
        """
        Here too, we we only have english concept names in the tables.
        """
        sourcelist = []
        for scon in sconlist:
            try:
                sourcelist.append(Cm_Source.get(Cm_Source.source_concept==scon))
            except:
                # if concept doesn't exist, create it with ICSI as owner
                try:
                    sconcept = Cm_Source.create(source_concept=scon,source_owner='ICSI')
                    sourcelist.append(sconcept)
                except:
                    self.logger.error(u'Error: could not get or create source concept (%s,%s)',
                                      lang,scon)
                    raise
        return sourcelist

    def getCurrentId(self, tablename, lang):
        if tablename == 'lm_sentence':
            return Lm_Sentence.select(fn.Max(Lm_Sentence.id)).where(Lm_Sentence.language==lang.upper()).scalar()
        if tablename == 'lm':
            return Lm.select(fn.Max(Lm.id)).where(Lm.language==lang.upper).scalar()
        if tablename == 'lm2cm_source':
            return Lm2Cm_Source.select(fn.Max(Lm2Cm_Source.id)).join(Lm).where(Lm.language==lang.upper()).scalar()
    
    def getRefHash(self, tablename, lang):
        rhash = {}
        if tablename=='lm_sentence':
            for row in Lm_Sentence.select(Lm_Sentence.id,Lm_Sentence.url).where(Lm_Sentence.lang==lang):
                rhash[row.url] = row.id
            return rhash
        return rhash
    
    def getLMsFromLang(self, lang, prot=None):
        if prot:
            return Lm.select().join(Protagonist).where((Lm.language==lang) & (Protagonist.name==prot))
        else:
            return Lm.select().where(Lm.language==lang)

    def getLMProperties(self, lm):
        targetFrame = None
        sourceFrames = []
        for row in Lm_Property.select().where(Lm_Property.lm==lm):
            if row.name=='hasSourceFrame':
                sourceFrames.append(row.value)
            elif row.name=='hasTargetFrame':
                targetFrame = row.value
        return targetFrame, sourceFrames
    
    def execute_sql(self,qstring):
        try:
            return gmrdatabase_proxy.execute_sql(qstring)
        except:
            self.logger.error('Error running query %s', qstring)
            raise
    
    def loadData(self,filename,table,lock=True):
        global gmrdatabase_proxy
        querybuf = []
        if lock:
            querybuf.append('LOCK TABLES `%s` WRITE;' % (table))
        # SJD was LOAD DATA LOCAL INFILE; local dropped to give more diagnostics
        querybuf.append('LOAD DATA LOCAL INFILE \'%s\' INTO TABLE `%s` CHARACTER SET utf8 FIELDS TERMINATED BY \',\' OPTIONALLY ENCLOSED BY \'"\' LINES TERMINATED BY \'\\n\';' % (filename,table))
        if lock:
            querybuf.append('UNLOCK TABLES;')
        #qstring = ''.join(querybuf)
        for qstring in querybuf:
            try:
                gmrdatabase_proxy.execute_sql(qstring)
            except:
                self.logger.error('Error running query %s',qstring)
                raise
            
    def deleteData(self,table,idstart,idend):
        """ Delete rows from the table whose IDs are inclusively within
        the range of IDs given.
        """
        delquery = 'DELETE FROM %s WHERE id >= %d AND id <= %d;' % (table, idstart, idend)
        try:
            gmrdatabase_proxy.execute_sql(delquery)
        except:
            self.logger.error('Error running delete query %s',delquery)
            raise
        
        
class GMRDBGeneral(GMRDB):
    getTargetConceptName = GMRDB.getTargetConceptGeneralName
    getTargetConcept = GMRDB.getTargetConceptGeneral
    getTargetConcepts = GMRDB.getTargetConceptsGeneral
    getGovTargetConcepts = GMRDB.getGovTargetConceptsGeneral
    getCMSourcesFromTarget = GMRDB.getCMSourcesFromTargetGeneral
    getLMsFromTarget = GMRDB.getLMsFromTargetGeneralSource
    getCountLMsFromTargetSource = GMRDB.getCountLMsFromTargetGeneralSource
    getCMCountByTargetConceptLang = GMRDB.getCMCountByTargetConceptGeneralLang
    getTargetConceptId = GMRDB.getTargetConceptGeneralId
    getCMLexicalCounts = GMRDB.getCMLexicalCountsGeneral
    getLMLexicalCounts = GMRDB.getLMLexicalCountsGeneral
    getCMFromSourceTargetLang = GMRDB.getCMFromSourceTargetLangGeneral
    getCMidLangSourceTarget = GMRDB.getCMidLangSourceTargetGeneral
    getScoreFromCmLangProperty = GMRDB.getScoreFromCmLangPropertyGeneral
    getConceptGroupNames = GMRDB.getConceptGroupNamesGeneral
    getLMsFromConceptGroup = GMRDB.getLMsFromConceptGroupGeneral

class GMRDBCase(GMRDB):    
    getTargetConceptName = GMRDB.getTargetConceptCaseName
    getTargetConcept = GMRDB.getTargetConceptCase
    getTargetConcepts = GMRDB.getTargetConceptsCase
    getGovTargetConcepts = GMRDB.getGovTargetConceptsCase
    getCMSourcesFromTarget = GMRDB.getCMSourcesFromTargetCase
    getLMsFromTarget = GMRDB.getLMsFromTargetCaseSource
    getCountLMsFromTargetSource = GMRDB.getCountLMsFromTargetCaseSource
    getCMCountByTargetConceptLang = GMRDB.getCMCountByTargetConceptCaseLang
    getTargetConceptId = GMRDB.getTargetConceptCaseId
    getCMLexicalCounts = GMRDB.getCMLexicalCountsCase
    getLMLexicalCounts = GMRDB.getLMLexicalCountsCase
    getCMFromSourceTargetLang = GMRDB.getCMFromSourceTargetLangCase
    getCMidLangSourceTarget = GMRDB.getCMidLangSourceTargetCase
    getScoreFromCmLangProperty = GMRDB.getScoreFromCmLangPropertyCase
    getConceptGroupNames = GMRDB.getConceptGroupNamesCase
    getLMsFromConceptGroup = GMRDB.getLMsFromConceptGroupCase
    
def main():
    """ for testing
    """
#    global gmrdatabase
#    gmrdatabase.connect()
    """
    tcons = Target_Concept.select()
    for tcon in tcons:
        print tcon.target_concept_en
    scons = Source_Concept.select()
    for scon in scons:
        print scon.source_concept_en, scon.source_dimension_en
    """
    logging.basicConfig(filename='gmrdb.log',level=logging.INFO,format='%(asctime)s %(levelname)s %(message)s')
#    importer = Lm_Importer('/scratch/tmp/jhong/en_latest.owl')
#    importer.doImport()

if __name__ == "__main__":
    status = main()
    sys.exit(status)
