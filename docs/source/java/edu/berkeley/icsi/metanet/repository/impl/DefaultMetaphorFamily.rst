.. java:import:: java.util Collection

.. java:import:: org.protege.owl.codegeneration WrappedIndividual

.. java:import:: org.protege.owl.codegeneration.impl WrappedIndividualImpl

.. java:import:: org.protege.owl.codegeneration.inference CodeGenerationInference

.. java:import:: org.semanticweb.owlapi.model IRI

.. java:import:: org.semanticweb.owlapi.model OWLOntology

DefaultMetaphorFamily
=====================

.. java:package:: edu.berkeley.icsi.metanet.repository.impl
   :noindex:

.. java:type:: public class DefaultMetaphorFamily extends WrappedIndividualImpl implements MetaphorFamily

   Generated by Protege (http://protege.stanford.edu). Source Class: DefaultMetaphorFamily

Constructors
------------
DefaultMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:constructor:: public DefaultMetaphorFamily(OWLOntology ontology, IRI iri, CodeGenerationInference inf)
   :outertype: DefaultMetaphorFamily

Methods
-------
addHasAlias
^^^^^^^^^^^

.. java:method:: public void addHasAlias(Object newHasAlias)
   :outertype: DefaultMetaphorFamily

addHasExample
^^^^^^^^^^^^^

.. java:method:: public void addHasExample(Example newHasExample)
   :outertype: DefaultMetaphorFamily

addHasMetaphors
^^^^^^^^^^^^^^^

.. java:method:: public void addHasMetaphors(Metaphor newHasMetaphors)
   :outertype: DefaultMetaphorFamily

addHasName
^^^^^^^^^^

.. java:method:: public void addHasName(String newHasName)
   :outertype: DefaultMetaphorFamily

addHasNameGloss
^^^^^^^^^^^^^^^

.. java:method:: public void addHasNameGloss(String newHasNameGloss)
   :outertype: DefaultMetaphorFamily

addIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsFromLanguage(String newIsFromLanguage)
   :outertype: DefaultMetaphorFamily

addIsMetaphorSubfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsMetaphorSubfamilyOf(MetaphorFamily newIsMetaphorSubfamilyOf)
   :outertype: DefaultMetaphorFamily

addIsMetaphorSuperfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsMetaphorSuperfamilyOf(MetaphorFamily newIsMetaphorSuperfamilyOf)
   :outertype: DefaultMetaphorFamily

getHasAlias
^^^^^^^^^^^

.. java:method:: public Collection<? extends String> getHasAlias()
   :outertype: DefaultMetaphorFamily

getHasExample
^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Example> getHasExample()
   :outertype: DefaultMetaphorFamily

getHasMetaphors
^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getHasMetaphors()
   :outertype: DefaultMetaphorFamily

getHasName
^^^^^^^^^^

.. java:method:: public String getHasName()
   :outertype: DefaultMetaphorFamily

getHasNameGloss
^^^^^^^^^^^^^^^

.. java:method:: public String getHasNameGloss()
   :outertype: DefaultMetaphorFamily

getIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method:: public String getIsFromLanguage()
   :outertype: DefaultMetaphorFamily

getIsMetaphorSubfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends MetaphorFamily> getIsMetaphorSubfamilyOf()
   :outertype: DefaultMetaphorFamily

getIsMetaphorSuperfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends MetaphorFamily> getIsMetaphorSuperfamilyOf()
   :outertype: DefaultMetaphorFamily

hasHasAlias
^^^^^^^^^^^

.. java:method:: public boolean hasHasAlias()
   :outertype: DefaultMetaphorFamily

hasHasExample
^^^^^^^^^^^^^

.. java:method:: public boolean hasHasExample()
   :outertype: DefaultMetaphorFamily

hasHasMetaphors
^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasMetaphors()
   :outertype: DefaultMetaphorFamily

hasHasName
^^^^^^^^^^

.. java:method:: public boolean hasHasName()
   :outertype: DefaultMetaphorFamily

hasHasNameGloss
^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasNameGloss()
   :outertype: DefaultMetaphorFamily

hasIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsFromLanguage()
   :outertype: DefaultMetaphorFamily

hasIsMetaphorSubfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsMetaphorSubfamilyOf()
   :outertype: DefaultMetaphorFamily

hasIsMetaphorSuperfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsMetaphorSuperfamilyOf()
   :outertype: DefaultMetaphorFamily

removeHasAlias
^^^^^^^^^^^^^^

.. java:method:: public void removeHasAlias(Object oldHasAlias)
   :outertype: DefaultMetaphorFamily

removeHasExample
^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasExample(Example oldHasExample)
   :outertype: DefaultMetaphorFamily

removeHasMetaphors
^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasMetaphors(Metaphor oldHasMetaphors)
   :outertype: DefaultMetaphorFamily

removeHasName
^^^^^^^^^^^^^

.. java:method:: public void removeHasName(String oldHasName)
   :outertype: DefaultMetaphorFamily

removeHasNameGloss
^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasNameGloss(String oldHasNameGloss)
   :outertype: DefaultMetaphorFamily

removeIsFromLanguage
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsFromLanguage(String oldIsFromLanguage)
   :outertype: DefaultMetaphorFamily

removeIsMetaphorSubfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsMetaphorSubfamilyOf(MetaphorFamily oldIsMetaphorSubfamilyOf)
   :outertype: DefaultMetaphorFamily

removeIsMetaphorSuperfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsMetaphorSuperfamilyOf(MetaphorFamily oldIsMetaphorSuperfamilyOf)
   :outertype: DefaultMetaphorFamily

