.. java:import:: java.util Collection

.. java:import:: org.protege.owl.codegeneration WrappedIndividual

.. java:import:: org.semanticweb.owlapi.model OWLNamedIndividual

.. java:import:: org.semanticweb.owlapi.model OWLOntology

VettedSchema
============

.. java:package:: edu.berkeley.icsi.metanet.repository
   :noindex:

.. java:type:: public interface VettedSchema extends Schema

   Generated by Protege (http://protege.stanford.edu).  Source Class: VettedSchema

Methods
-------
addCorrespondsToFrameNet
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addCorrespondsToFrameNet(String newCorrespondsToFrameNet)
   :outertype: VettedSchema

   Adds a correspondsToFrameNet property value.

   :param newCorrespondsToFrameNet: the correspondsToFrameNet property value to be added

addHasAlias
^^^^^^^^^^^

.. java:method::  void addHasAlias(Object newHasAlias)
   :outertype: VettedSchema

   Adds a hasAlias property value.

   :param newHasAlias: the hasAlias property value to be added

addHasBindings
^^^^^^^^^^^^^^

.. java:method::  void addHasBindings(Binding newHasBindings)
   :outertype: VettedSchema

   Adds a hasBindings property value.

   :param newHasBindings: the hasBindings property value to be added

addHasCulturalContent
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addHasCulturalContent(String newHasCulturalContent)
   :outertype: VettedSchema

   Adds a hasCulturalContent property value.

   :param newHasCulturalContent: the hasCulturalContent property value to be added

addHasExample
^^^^^^^^^^^^^

.. java:method::  void addHasExample(Example newHasExample)
   :outertype: VettedSchema

   Adds a hasExample property value.

   :param newHasExample: the hasExample property value to be added

addHasInference
^^^^^^^^^^^^^^^

.. java:method::  void addHasInference(Inference newHasInference)
   :outertype: VettedSchema

   Adds a hasInference property value.

   :param newHasInference: the hasInference property value to be added

addHasLexicalUnit
^^^^^^^^^^^^^^^^^

.. java:method::  void addHasLexicalUnit(LexicalUnit newHasLexicalUnit)
   :outertype: VettedSchema

   Adds a hasLexicalUnit property value.

   :param newHasLexicalUnit: the hasLexicalUnit property value to be added

addHasName
^^^^^^^^^^

.. java:method::  void addHasName(String newHasName)
   :outertype: VettedSchema

   Adds a hasName property value.

   :param newHasName: the hasName property value to be added

addHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  void addHasNameGloss(String newHasNameGloss)
   :outertype: VettedSchema

   Adds a hasNameGloss property value.

   :param newHasNameGloss: the hasNameGloss property value to be added

addHasRoles
^^^^^^^^^^^

.. java:method::  void addHasRoles(Role newHasRoles)
   :outertype: VettedSchema

   Adds a hasRoles property value.

   :param newHasRoles: the hasRoles property value to be added

addHasSchemaType
^^^^^^^^^^^^^^^^

.. java:method::  void addHasSchemaType(String newHasSchemaType)
   :outertype: VettedSchema

   Adds a hasSchemaType property value.

   :param newHasSchemaType: the hasSchemaType property value to be added

addIsApplicableToLanguage
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsApplicableToLanguage(String newIsApplicableToLanguage)
   :outertype: VettedSchema

   Adds a isApplicableToLanguage property value.

   :param newIsApplicableToLanguage: the isApplicableToLanguage property value to be added

addIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  void addIsFromLanguage(String newIsFromLanguage)
   :outertype: VettedSchema

   Adds a isFromLanguage property value.

   :param newIsFromLanguage: the isFromLanguage property value to be added

addIsInSchemaFamily
^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsInSchemaFamily(SchemaFamily newIsInSchemaFamily)
   :outertype: VettedSchema

   Adds a isInSchemaFamily property value.

   :param newIsInSchemaFamily: the isInSchemaFamily property value to be added

addIsRelatedToSchema
^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsRelatedToSchema(Schema newIsRelatedToSchema)
   :outertype: VettedSchema

   Adds a isRelatedToSchema property value.

   :param newIsRelatedToSchema: the isRelatedToSchema property value to be added

addIsSourceDomainOfMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsSourceDomainOfMetaphors(Metaphor newIsSourceDomainOfMetaphors)
   :outertype: VettedSchema

   Adds a isSourceDomainOfMetaphors property value.

   :param newIsSourceDomainOfMetaphors: the isSourceDomainOfMetaphors property value to be added

addIsSubcaseOfSchema
^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsSubcaseOfSchema(Schema newIsSubcaseOfSchema)
   :outertype: VettedSchema

   Adds a isSubcaseOfSchema property value.

   :param newIsSubcaseOfSchema: the isSubcaseOfSchema property value to be added

addIsSubprocessOfSchema
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsSubprocessOfSchema(Schema newIsSubprocessOfSchema)
   :outertype: VettedSchema

   Adds a isSubprocessOfSchema property value.

   :param newIsSubprocessOfSchema: the isSubprocessOfSchema property value to be added

addIsSupercaseOfSchema
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsSupercaseOfSchema(Schema newIsSupercaseOfSchema)
   :outertype: VettedSchema

   Adds a isSupercaseOfSchema property value.

   :param newIsSupercaseOfSchema: the isSupercaseOfSchema property value to be added

addIsSuperprocessOfSchema
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsSuperprocessOfSchema(Schema newIsSuperprocessOfSchema)
   :outertype: VettedSchema

   Adds a isSuperprocessOfSchema property value.

   :param newIsSuperprocessOfSchema: the isSuperprocessOfSchema property value to be added

addIsTargetDomainOfMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsTargetDomainOfMetaphors(Metaphor newIsTargetDomainOfMetaphors)
   :outertype: VettedSchema

   Adds a isTargetDomainOfMetaphors property value.

   :param newIsTargetDomainOfMetaphors: the isTargetDomainOfMetaphors property value to be added

addIsUsedBySchema
^^^^^^^^^^^^^^^^^

.. java:method::  void addIsUsedBySchema(Schema newIsUsedBySchema)
   :outertype: VettedSchema

   Adds a isUsedBySchema property value.

   :param newIsUsedBySchema: the isUsedBySchema property value to be added

addMakesUseOfSchema
^^^^^^^^^^^^^^^^^^^

.. java:method::  void addMakesUseOfSchema(Schema newMakesUseOfSchema)
   :outertype: VettedSchema

   Adds a makesUseOfSchema property value.

   :param newMakesUseOfSchema: the makesUseOfSchema property value to be added

delete
^^^^^^

.. java:method::  void delete()
   :outertype: VettedSchema

getCorrespondsToFrameNet
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends String> getCorrespondsToFrameNet()
   :outertype: VettedSchema

   Gets all property values for the correspondsToFrameNet property.

getHasAlias
^^^^^^^^^^^

.. java:method::  Collection<? extends Object> getHasAlias()
   :outertype: VettedSchema

   Gets all property values for the hasAlias property.

getHasBindings
^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Binding> getHasBindings()
   :outertype: VettedSchema

   Gets all property values for the hasBindings property.

getHasCulturalContent
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  String getHasCulturalContent()
   :outertype: VettedSchema

   Gets the value for the hasCulturalContent functional property.

getHasExample
^^^^^^^^^^^^^

.. java:method::  Collection<? extends Example> getHasExample()
   :outertype: VettedSchema

   Gets all property values for the hasExample property.

getHasInference
^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Inference> getHasInference()
   :outertype: VettedSchema

   Gets all property values for the hasInference property.

getHasLexicalUnit
^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends LexicalUnit> getHasLexicalUnit()
   :outertype: VettedSchema

   Gets all property values for the hasLexicalUnit property.

getHasName
^^^^^^^^^^

.. java:method::  String getHasName()
   :outertype: VettedSchema

   Gets the value for the hasName functional property.

getHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  String getHasNameGloss()
   :outertype: VettedSchema

   Gets the value for the hasNameGloss functional property.

getHasRoles
^^^^^^^^^^^

.. java:method::  Collection<? extends Role> getHasRoles()
   :outertype: VettedSchema

   Gets all property values for the hasRoles property.

getHasSchemaType
^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends String> getHasSchemaType()
   :outertype: VettedSchema

   Gets all property values for the hasSchemaType property.

getIsApplicableToLanguage
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends String> getIsApplicableToLanguage()
   :outertype: VettedSchema

   Gets all property values for the isApplicableToLanguage property.

getIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  String getIsFromLanguage()
   :outertype: VettedSchema

   Gets the value for the isFromLanguage functional property.

getIsInSchemaFamily
^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends SchemaFamily> getIsInSchemaFamily()
   :outertype: VettedSchema

   Gets all property values for the isInSchemaFamily property.

getIsRelatedToSchema
^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Schema> getIsRelatedToSchema()
   :outertype: VettedSchema

   Gets all property values for the isRelatedToSchema property.

getIsSourceDomainOfMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsSourceDomainOfMetaphors()
   :outertype: VettedSchema

   Gets all property values for the isSourceDomainOfMetaphors property.

getIsSubcaseOfSchema
^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Schema> getIsSubcaseOfSchema()
   :outertype: VettedSchema

   Gets all property values for the isSubcaseOfSchema property.

getIsSubprocessOfSchema
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Schema> getIsSubprocessOfSchema()
   :outertype: VettedSchema

   Gets all property values for the isSubprocessOfSchema property.

getIsSupercaseOfSchema
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Schema> getIsSupercaseOfSchema()
   :outertype: VettedSchema

   Gets all property values for the isSupercaseOfSchema property.

getIsSuperprocessOfSchema
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Schema> getIsSuperprocessOfSchema()
   :outertype: VettedSchema

   Gets all property values for the isSuperprocessOfSchema property.

getIsTargetDomainOfMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsTargetDomainOfMetaphors()
   :outertype: VettedSchema

   Gets all property values for the isTargetDomainOfMetaphors property.

getIsUsedBySchema
^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Schema> getIsUsedBySchema()
   :outertype: VettedSchema

   Gets all property values for the isUsedBySchema property.

getMakesUseOfSchema
^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Schema> getMakesUseOfSchema()
   :outertype: VettedSchema

   Gets all property values for the makesUseOfSchema property.

getOwlIndividual
^^^^^^^^^^^^^^^^

.. java:method::  OWLNamedIndividual getOwlIndividual()
   :outertype: VettedSchema

getOwlOntology
^^^^^^^^^^^^^^

.. java:method::  OWLOntology getOwlOntology()
   :outertype: VettedSchema

hasCorrespondsToFrameNet
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasCorrespondsToFrameNet()
   :outertype: VettedSchema

   Checks if the class has a correspondsToFrameNet property value.

   :return: true if there is a correspondsToFrameNet property value.

hasHasAlias
^^^^^^^^^^^

.. java:method::  boolean hasHasAlias()
   :outertype: VettedSchema

   Checks if the class has a hasAlias property value.

   :return: true if there is a hasAlias property value.

hasHasBindings
^^^^^^^^^^^^^^

.. java:method::  boolean hasHasBindings()
   :outertype: VettedSchema

   Checks if the class has a hasBindings property value.

   :return: true if there is a hasBindings property value.

hasHasCulturalContent
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasCulturalContent()
   :outertype: VettedSchema

   Checks if the class has a hasCulturalContent property value.

   :return: true if there is a hasCulturalContent property value.

hasHasExample
^^^^^^^^^^^^^

.. java:method::  boolean hasHasExample()
   :outertype: VettedSchema

   Checks if the class has a hasExample property value.

   :return: true if there is a hasExample property value.

hasHasInference
^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasInference()
   :outertype: VettedSchema

   Checks if the class has a hasInference property value.

   :return: true if there is a hasInference property value.

hasHasLexicalUnit
^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasLexicalUnit()
   :outertype: VettedSchema

   Checks if the class has a hasLexicalUnit property value.

   :return: true if there is a hasLexicalUnit property value.

hasHasName
^^^^^^^^^^

.. java:method::  boolean hasHasName()
   :outertype: VettedSchema

   Checks if the class has a hasName property value.

   :return: true if there is a hasName property value.

hasHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasNameGloss()
   :outertype: VettedSchema

   Checks if the class has a hasNameGloss property value.

   :return: true if there is a hasNameGloss property value.

hasHasRoles
^^^^^^^^^^^

.. java:method::  boolean hasHasRoles()
   :outertype: VettedSchema

   Checks if the class has a hasRoles property value.

   :return: true if there is a hasRoles property value.

hasHasSchemaType
^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasSchemaType()
   :outertype: VettedSchema

   Checks if the class has a hasSchemaType property value.

   :return: true if there is a hasSchemaType property value.

hasIsApplicableToLanguage
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsApplicableToLanguage()
   :outertype: VettedSchema

   Checks if the class has a isApplicableToLanguage property value.

   :return: true if there is a isApplicableToLanguage property value.

hasIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsFromLanguage()
   :outertype: VettedSchema

   Checks if the class has a isFromLanguage property value.

   :return: true if there is a isFromLanguage property value.

hasIsInSchemaFamily
^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsInSchemaFamily()
   :outertype: VettedSchema

   Checks if the class has a isInSchemaFamily property value.

   :return: true if there is a isInSchemaFamily property value.

hasIsRelatedToSchema
^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsRelatedToSchema()
   :outertype: VettedSchema

   Checks if the class has a isRelatedToSchema property value.

   :return: true if there is a isRelatedToSchema property value.

hasIsSourceDomainOfMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsSourceDomainOfMetaphors()
   :outertype: VettedSchema

   Checks if the class has a isSourceDomainOfMetaphors property value.

   :return: true if there is a isSourceDomainOfMetaphors property value.

hasIsSubcaseOfSchema
^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsSubcaseOfSchema()
   :outertype: VettedSchema

   Checks if the class has a isSubcaseOfSchema property value.

   :return: true if there is a isSubcaseOfSchema property value.

hasIsSubprocessOfSchema
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsSubprocessOfSchema()
   :outertype: VettedSchema

   Checks if the class has a isSubprocessOfSchema property value.

   :return: true if there is a isSubprocessOfSchema property value.

hasIsSupercaseOfSchema
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsSupercaseOfSchema()
   :outertype: VettedSchema

   Checks if the class has a isSupercaseOfSchema property value.

   :return: true if there is a isSupercaseOfSchema property value.

hasIsSuperprocessOfSchema
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsSuperprocessOfSchema()
   :outertype: VettedSchema

   Checks if the class has a isSuperprocessOfSchema property value.

   :return: true if there is a isSuperprocessOfSchema property value.

hasIsTargetDomainOfMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsTargetDomainOfMetaphors()
   :outertype: VettedSchema

   Checks if the class has a isTargetDomainOfMetaphors property value.

   :return: true if there is a isTargetDomainOfMetaphors property value.

hasIsUsedBySchema
^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsUsedBySchema()
   :outertype: VettedSchema

   Checks if the class has a isUsedBySchema property value.

   :return: true if there is a isUsedBySchema property value.

hasMakesUseOfSchema
^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasMakesUseOfSchema()
   :outertype: VettedSchema

   Checks if the class has a makesUseOfSchema property value.

   :return: true if there is a makesUseOfSchema property value.

removeCorrespondsToFrameNet
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeCorrespondsToFrameNet(String oldCorrespondsToFrameNet)
   :outertype: VettedSchema

   Removes a correspondsToFrameNet property value.

   :param oldCorrespondsToFrameNet: the correspondsToFrameNet property value to be removed.

removeHasAlias
^^^^^^^^^^^^^^

.. java:method::  void removeHasAlias(Object oldHasAlias)
   :outertype: VettedSchema

   Removes a hasAlias property value.

   :param oldHasAlias: the hasAlias property value to be removed.

removeHasBindings
^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasBindings(Binding oldHasBindings)
   :outertype: VettedSchema

   Removes a hasBindings property value.

   :param oldHasBindings: the hasBindings property value to be removed.

removeHasCulturalContent
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasCulturalContent(String oldHasCulturalContent)
   :outertype: VettedSchema

   Removes a hasCulturalContent property value.

   :param oldHasCulturalContent: the hasCulturalContent property value to be removed.

removeHasExample
^^^^^^^^^^^^^^^^

.. java:method::  void removeHasExample(Example oldHasExample)
   :outertype: VettedSchema

   Removes a hasExample property value.

   :param oldHasExample: the hasExample property value to be removed.

removeHasInference
^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasInference(Inference oldHasInference)
   :outertype: VettedSchema

   Removes a hasInference property value.

   :param oldHasInference: the hasInference property value to be removed.

removeHasLexicalUnit
^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasLexicalUnit(LexicalUnit oldHasLexicalUnit)
   :outertype: VettedSchema

   Removes a hasLexicalUnit property value.

   :param oldHasLexicalUnit: the hasLexicalUnit property value to be removed.

removeHasName
^^^^^^^^^^^^^

.. java:method::  void removeHasName(String oldHasName)
   :outertype: VettedSchema

   Removes a hasName property value.

   :param oldHasName: the hasName property value to be removed.

removeHasNameGloss
^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasNameGloss(String oldHasNameGloss)
   :outertype: VettedSchema

   Removes a hasNameGloss property value.

   :param oldHasNameGloss: the hasNameGloss property value to be removed.

removeHasRoles
^^^^^^^^^^^^^^

.. java:method::  void removeHasRoles(Role oldHasRoles)
   :outertype: VettedSchema

   Removes a hasRoles property value.

   :param oldHasRoles: the hasRoles property value to be removed.

removeHasSchemaType
^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasSchemaType(String oldHasSchemaType)
   :outertype: VettedSchema

   Removes a hasSchemaType property value.

   :param oldHasSchemaType: the hasSchemaType property value to be removed.

removeIsApplicableToLanguage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsApplicableToLanguage(String oldIsApplicableToLanguage)
   :outertype: VettedSchema

   Removes a isApplicableToLanguage property value.

   :param oldIsApplicableToLanguage: the isApplicableToLanguage property value to be removed.

removeIsFromLanguage
^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsFromLanguage(String oldIsFromLanguage)
   :outertype: VettedSchema

   Removes a isFromLanguage property value.

   :param oldIsFromLanguage: the isFromLanguage property value to be removed.

removeIsInSchemaFamily
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsInSchemaFamily(SchemaFamily oldIsInSchemaFamily)
   :outertype: VettedSchema

   Removes a isInSchemaFamily property value.

   :param oldIsInSchemaFamily: the isInSchemaFamily property value to be removed.

removeIsRelatedToSchema
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsRelatedToSchema(Schema oldIsRelatedToSchema)
   :outertype: VettedSchema

   Removes a isRelatedToSchema property value.

   :param oldIsRelatedToSchema: the isRelatedToSchema property value to be removed.

removeIsSourceDomainOfMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsSourceDomainOfMetaphors(Metaphor oldIsSourceDomainOfMetaphors)
   :outertype: VettedSchema

   Removes a isSourceDomainOfMetaphors property value.

   :param oldIsSourceDomainOfMetaphors: the isSourceDomainOfMetaphors property value to be removed.

removeIsSubcaseOfSchema
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsSubcaseOfSchema(Schema oldIsSubcaseOfSchema)
   :outertype: VettedSchema

   Removes a isSubcaseOfSchema property value.

   :param oldIsSubcaseOfSchema: the isSubcaseOfSchema property value to be removed.

removeIsSubprocessOfSchema
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsSubprocessOfSchema(Schema oldIsSubprocessOfSchema)
   :outertype: VettedSchema

   Removes a isSubprocessOfSchema property value.

   :param oldIsSubprocessOfSchema: the isSubprocessOfSchema property value to be removed.

removeIsSupercaseOfSchema
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsSupercaseOfSchema(Schema oldIsSupercaseOfSchema)
   :outertype: VettedSchema

   Removes a isSupercaseOfSchema property value.

   :param oldIsSupercaseOfSchema: the isSupercaseOfSchema property value to be removed.

removeIsSuperprocessOfSchema
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsSuperprocessOfSchema(Schema oldIsSuperprocessOfSchema)
   :outertype: VettedSchema

   Removes a isSuperprocessOfSchema property value.

   :param oldIsSuperprocessOfSchema: the isSuperprocessOfSchema property value to be removed.

removeIsTargetDomainOfMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsTargetDomainOfMetaphors(Metaphor oldIsTargetDomainOfMetaphors)
   :outertype: VettedSchema

   Removes a isTargetDomainOfMetaphors property value.

   :param oldIsTargetDomainOfMetaphors: the isTargetDomainOfMetaphors property value to be removed.

removeIsUsedBySchema
^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsUsedBySchema(Schema oldIsUsedBySchema)
   :outertype: VettedSchema

   Removes a isUsedBySchema property value.

   :param oldIsUsedBySchema: the isUsedBySchema property value to be removed.

removeMakesUseOfSchema
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeMakesUseOfSchema(Schema oldMakesUseOfSchema)
   :outertype: VettedSchema

   Removes a makesUseOfSchema property value.

   :param oldMakesUseOfSchema: the makesUseOfSchema property value to be removed.

