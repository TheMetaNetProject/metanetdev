.. java:import:: java.util Collection

.. java:import:: org.protege.owl.codegeneration WrappedIndividual

.. java:import:: org.semanticweb.owlapi.model OWLNamedIndividual

.. java:import:: org.semanticweb.owlapi.model OWLOntology

MetaphorFamily
==============

.. java:package:: edu.berkeley.icsi.metanet.repository
   :noindex:

.. java:type:: public interface MetaphorFamily extends WrappedIndividual

   Generated by Protege (http://protege.stanford.edu).  Source Class: MetaphorFamily

Methods
-------
addHasAlias
^^^^^^^^^^^

.. java:method::  void addHasAlias(Object newHasAlias)
   :outertype: MetaphorFamily

   Adds a hasAlias property value.

   :param newHasAlias: the hasAlias property value to be added

addHasExample
^^^^^^^^^^^^^

.. java:method::  void addHasExample(Example newHasExample)
   :outertype: MetaphorFamily

   Adds a hasExample property value.

   :param newHasExample: the hasExample property value to be added

addHasMetaphors
^^^^^^^^^^^^^^^

.. java:method::  void addHasMetaphors(Metaphor newHasMetaphors)
   :outertype: MetaphorFamily

   Adds a hasMetaphors property value.

   :param newHasMetaphors: the hasMetaphors property value to be added

addHasName
^^^^^^^^^^

.. java:method::  void addHasName(String newHasName)
   :outertype: MetaphorFamily

   Adds a hasName property value.

   :param newHasName: the hasName property value to be added

addHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  void addHasNameGloss(String newHasNameGloss)
   :outertype: MetaphorFamily

   Adds a hasNameGloss property value.

   :param newHasNameGloss: the hasNameGloss property value to be added

addIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  void addIsFromLanguage(String newIsFromLanguage)
   :outertype: MetaphorFamily

   Adds a isFromLanguage property value.

   :param newIsFromLanguage: the isFromLanguage property value to be added

addIsMetaphorSubfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsMetaphorSubfamilyOf(MetaphorFamily newIsMetaphorSubfamilyOf)
   :outertype: MetaphorFamily

   Adds a isMetaphorSubfamilyOf property value.

   :param newIsMetaphorSubfamilyOf: the isMetaphorSubfamilyOf property value to be added

addIsMetaphorSuperfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsMetaphorSuperfamilyOf(MetaphorFamily newIsMetaphorSuperfamilyOf)
   :outertype: MetaphorFamily

   Adds a isMetaphorSuperfamilyOf property value.

   :param newIsMetaphorSuperfamilyOf: the isMetaphorSuperfamilyOf property value to be added

delete
^^^^^^

.. java:method::  void delete()
   :outertype: MetaphorFamily

getHasAlias
^^^^^^^^^^^

.. java:method::  Collection<? extends String> getHasAlias()
   :outertype: MetaphorFamily

   Gets all property values for the hasAlias property.

getHasExample
^^^^^^^^^^^^^

.. java:method::  Collection<? extends Example> getHasExample()
   :outertype: MetaphorFamily

   Gets all property values for the hasExample property.

getHasMetaphors
^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getHasMetaphors()
   :outertype: MetaphorFamily

   Gets all property values for the hasMetaphors property.

getHasName
^^^^^^^^^^

.. java:method::  String getHasName()
   :outertype: MetaphorFamily

   Gets the value for the hasName functional property.

getHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  String getHasNameGloss()
   :outertype: MetaphorFamily

   Gets the value for the hasNameGloss functional property.

getIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  String getIsFromLanguage()
   :outertype: MetaphorFamily

   Gets the value for the isFromLanguage functional property.

getIsMetaphorSubfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends MetaphorFamily> getIsMetaphorSubfamilyOf()
   :outertype: MetaphorFamily

   Gets all property values for the isMetaphorSubfamilyOf property.

getIsMetaphorSuperfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends MetaphorFamily> getIsMetaphorSuperfamilyOf()
   :outertype: MetaphorFamily

   Gets all property values for the isMetaphorSuperfamilyOf property.

getOwlIndividual
^^^^^^^^^^^^^^^^

.. java:method::  OWLNamedIndividual getOwlIndividual()
   :outertype: MetaphorFamily

getOwlOntology
^^^^^^^^^^^^^^

.. java:method::  OWLOntology getOwlOntology()
   :outertype: MetaphorFamily

hasHasAlias
^^^^^^^^^^^

.. java:method::  boolean hasHasAlias()
   :outertype: MetaphorFamily

   Checks if the class has a hasAlias property value.

   :return: true if there is a hasAlias property value.

hasHasExample
^^^^^^^^^^^^^

.. java:method::  boolean hasHasExample()
   :outertype: MetaphorFamily

   Checks if the class has a hasExample property value.

   :return: true if there is a hasExample property value.

hasHasMetaphors
^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasMetaphors()
   :outertype: MetaphorFamily

   Checks if the class has a hasMetaphors property value.

   :return: true if there is a hasMetaphors property value.

hasHasName
^^^^^^^^^^

.. java:method::  boolean hasHasName()
   :outertype: MetaphorFamily

   Checks if the class has a hasName property value.

   :return: true if there is a hasName property value.

hasHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasNameGloss()
   :outertype: MetaphorFamily

   Checks if the class has a hasNameGloss property value.

   :return: true if there is a hasNameGloss property value.

hasIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsFromLanguage()
   :outertype: MetaphorFamily

   Checks if the class has a isFromLanguage property value.

   :return: true if there is a isFromLanguage property value.

hasIsMetaphorSubfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsMetaphorSubfamilyOf()
   :outertype: MetaphorFamily

   Checks if the class has a isMetaphorSubfamilyOf property value.

   :return: true if there is a isMetaphorSubfamilyOf property value.

hasIsMetaphorSuperfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsMetaphorSuperfamilyOf()
   :outertype: MetaphorFamily

   Checks if the class has a isMetaphorSuperfamilyOf property value.

   :return: true if there is a isMetaphorSuperfamilyOf property value.

removeHasAlias
^^^^^^^^^^^^^^

.. java:method::  void removeHasAlias(Object oldHasAlias)
   :outertype: MetaphorFamily

   Removes a hasAlias property value.

   :param oldHasAlias: the hasAlias property value to be removed.

removeHasExample
^^^^^^^^^^^^^^^^

.. java:method::  void removeHasExample(Example oldHasExample)
   :outertype: MetaphorFamily

   Removes a hasExample property value.

   :param oldHasExample: the hasExample property value to be removed.

removeHasMetaphors
^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasMetaphors(Metaphor oldHasMetaphors)
   :outertype: MetaphorFamily

   Removes a hasMetaphors property value.

   :param oldHasMetaphors: the hasMetaphors property value to be removed.

removeHasName
^^^^^^^^^^^^^

.. java:method::  void removeHasName(String oldHasName)
   :outertype: MetaphorFamily

   Removes a hasName property value.

   :param oldHasName: the hasName property value to be removed.

removeHasNameGloss
^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasNameGloss(String oldHasNameGloss)
   :outertype: MetaphorFamily

   Removes a hasNameGloss property value.

   :param oldHasNameGloss: the hasNameGloss property value to be removed.

removeIsFromLanguage
^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsFromLanguage(String oldIsFromLanguage)
   :outertype: MetaphorFamily

   Removes a isFromLanguage property value.

   :param oldIsFromLanguage: the isFromLanguage property value to be removed.

removeIsMetaphorSubfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsMetaphorSubfamilyOf(MetaphorFamily oldIsMetaphorSubfamilyOf)
   :outertype: MetaphorFamily

   Removes a isMetaphorSubfamilyOf property value.

   :param oldIsMetaphorSubfamilyOf: the isMetaphorSubfamilyOf property value to be removed.

removeIsMetaphorSuperfamilyOf
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsMetaphorSuperfamilyOf(MetaphorFamily oldIsMetaphorSuperfamilyOf)
   :outertype: MetaphorFamily

   Removes a isMetaphorSuperfamilyOf property value.

   :param oldIsMetaphorSuperfamilyOf: the isMetaphorSuperfamilyOf property value to be removed.

