.. java:import:: java.util Collection

.. java:import:: org.protege.owl.codegeneration WrappedIndividual

.. java:import:: org.protege.owl.codegeneration.impl WrappedIndividualImpl

.. java:import:: org.protege.owl.codegeneration.inference CodeGenerationInference

.. java:import:: org.semanticweb.owlapi.model IRI

.. java:import:: org.semanticweb.owlapi.model OWLOntology

DefaultVettedMetaphor
=====================

.. java:package:: edu.berkeley.icsi.metanet.repository.impl
   :noindex:

.. java:type:: public class DefaultVettedMetaphor extends WrappedIndividualImpl implements VettedMetaphor

   Generated by Protege (http://protege.stanford.edu). Source Class: DefaultVettedMetaphor

Constructors
------------
DefaultVettedMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:constructor:: public DefaultVettedMetaphor(OWLOntology ontology, IRI iri, CodeGenerationInference inf)
   :outertype: DefaultVettedMetaphor

Methods
-------
addEntailsMetaphor
^^^^^^^^^^^^^^^^^^

.. java:method:: public void addEntailsMetaphor(Metaphor newEntailsMetaphor)
   :outertype: DefaultVettedMetaphor

addHasAlias
^^^^^^^^^^^

.. java:method:: public void addHasAlias(Object newHasAlias)
   :outertype: DefaultVettedMetaphor

addHasEntailment
^^^^^^^^^^^^^^^^

.. java:method:: public void addHasEntailment(Entailment newHasEntailment)
   :outertype: DefaultVettedMetaphor

addHasExample
^^^^^^^^^^^^^

.. java:method:: public void addHasExample(Example newHasExample)
   :outertype: DefaultVettedMetaphor

addHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasExperientialBasis(String newHasExperientialBasis)
   :outertype: DefaultVettedMetaphor

addHasMappings
^^^^^^^^^^^^^^

.. java:method:: public void addHasMappings(Mapping newHasMappings)
   :outertype: DefaultVettedMetaphor

addHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasMetaphorLevel(String newHasMetaphorLevel)
   :outertype: DefaultVettedMetaphor

addHasMetaphorType
^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasMetaphorType(String newHasMetaphorType)
   :outertype: DefaultVettedMetaphor

addHasName
^^^^^^^^^^

.. java:method:: public void addHasName(String newHasName)
   :outertype: DefaultVettedMetaphor

addHasNameGloss
^^^^^^^^^^^^^^^

.. java:method:: public void addHasNameGloss(String newHasNameGloss)
   :outertype: DefaultVettedMetaphor

addHasSourceSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasSourceSchema(Schema newHasSourceSchema)
   :outertype: DefaultVettedMetaphor

addHasTargetSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasTargetSchema(Schema newHasTargetSchema)
   :outertype: DefaultVettedMetaphor

addHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasTransitiveSubpart1Metaphor(Metaphor newHasTransitiveSubpart1Metaphor)
   :outertype: DefaultVettedMetaphor

addHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasTransitiveSubpart2Metaphor(Metaphor newHasTransitiveSubpart2Metaphor)
   :outertype: DefaultVettedMetaphor

addIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsEntailedByMetaphor(Metaphor newIsEntailedByMetaphor)
   :outertype: DefaultVettedMetaphor

addIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsFromLanguage(String newIsFromLanguage)
   :outertype: DefaultVettedMetaphor

addIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsInMetaphorFamily(MetaphorFamily newIsInMetaphorFamily)
   :outertype: DefaultVettedMetaphor

addIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsRelatedToMetaphor(Metaphor newIsRelatedToMetaphor)
   :outertype: DefaultVettedMetaphor

addIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsRelatedToMetaphorBySource(Metaphor newIsRelatedToMetaphorBySource)
   :outertype: DefaultVettedMetaphor

addIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsRelatedToMetaphorByTarget(Metaphor newIsRelatedToMetaphorByTarget)
   :outertype: DefaultVettedMetaphor

addIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsSourceSubcaseOfMetaphor(Metaphor newIsSourceSubcaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

addIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsSourceSupercaseOfMetaphor(Metaphor newIsSourceSupercaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

addIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsSubcaseOfMetaphor(Metaphor newIsSubcaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

addIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsSupercaseOfMetaphor(Metaphor newIsSupercaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

addIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsTargetSubcaseOfMetaphor(Metaphor newIsTargetSubcaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

addIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsTargetSupercaseOfMetaphor(Metaphor newIsTargetSupercaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

addIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsTransitiveSubpart1OfMetaphor(Metaphor newIsTransitiveSubpart1OfMetaphor)
   :outertype: DefaultVettedMetaphor

addIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsTransitiveSubpart2OfMetaphor(Metaphor newIsTransitiveSubpart2OfMetaphor)
   :outertype: DefaultVettedMetaphor

addIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsUsedByMetaphor(Metaphor newIsUsedByMetaphor)
   :outertype: DefaultVettedMetaphor

addMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addMakesUseOfMetaphor(Metaphor newMakesUseOfMetaphor)
   :outertype: DefaultVettedMetaphor

addWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addWasInvestigatedFor(String newWasInvestigatedFor)
   :outertype: DefaultVettedMetaphor

getEntailsMetaphor
^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getEntailsMetaphor()
   :outertype: DefaultVettedMetaphor

getHasAlias
^^^^^^^^^^^

.. java:method:: public Collection<? extends Object> getHasAlias()
   :outertype: DefaultVettedMetaphor

getHasEntailment
^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Entailment> getHasEntailment()
   :outertype: DefaultVettedMetaphor

getHasExample
^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Example> getHasExample()
   :outertype: DefaultVettedMetaphor

getHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public String getHasExperientialBasis()
   :outertype: DefaultVettedMetaphor

getHasMappings
^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Mapping> getHasMappings()
   :outertype: DefaultVettedMetaphor

getHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^

.. java:method:: public String getHasMetaphorLevel()
   :outertype: DefaultVettedMetaphor

getHasMetaphorType
^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends String> getHasMetaphorType()
   :outertype: DefaultVettedMetaphor

getHasName
^^^^^^^^^^

.. java:method:: public String getHasName()
   :outertype: DefaultVettedMetaphor

getHasNameGloss
^^^^^^^^^^^^^^^

.. java:method:: public String getHasNameGloss()
   :outertype: DefaultVettedMetaphor

getHasSourceSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public Schema getHasSourceSchema()
   :outertype: DefaultVettedMetaphor

getHasTargetSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public Schema getHasTargetSchema()
   :outertype: DefaultVettedMetaphor

getHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getHasTransitiveSubpart1Metaphor()
   :outertype: DefaultVettedMetaphor

getHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getHasTransitiveSubpart2Metaphor()
   :outertype: DefaultVettedMetaphor

getIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsEntailedByMetaphor()
   :outertype: DefaultVettedMetaphor

getIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method:: public String getIsFromLanguage()
   :outertype: DefaultVettedMetaphor

getIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends MetaphorFamily> getIsInMetaphorFamily()
   :outertype: DefaultVettedMetaphor

getIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsRelatedToMetaphor()
   :outertype: DefaultVettedMetaphor

getIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsRelatedToMetaphorBySource()
   :outertype: DefaultVettedMetaphor

getIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsRelatedToMetaphorByTarget()
   :outertype: DefaultVettedMetaphor

getIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsSourceSubcaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

getIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsSourceSupercaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

getIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsSubcaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

getIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsSupercaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

getIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsTargetSubcaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

getIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsTargetSupercaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

getIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsTransitiveSubpart1OfMetaphor()
   :outertype: DefaultVettedMetaphor

getIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsTransitiveSubpart2OfMetaphor()
   :outertype: DefaultVettedMetaphor

getIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsUsedByMetaphor()
   :outertype: DefaultVettedMetaphor

getMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getMakesUseOfMetaphor()
   :outertype: DefaultVettedMetaphor

getWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends String> getWasInvestigatedFor()
   :outertype: DefaultVettedMetaphor

hasEntailsMetaphor
^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasEntailsMetaphor()
   :outertype: DefaultVettedMetaphor

hasHasAlias
^^^^^^^^^^^

.. java:method:: public boolean hasHasAlias()
   :outertype: DefaultVettedMetaphor

hasHasEntailment
^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasEntailment()
   :outertype: DefaultVettedMetaphor

hasHasExample
^^^^^^^^^^^^^

.. java:method:: public boolean hasHasExample()
   :outertype: DefaultVettedMetaphor

hasHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasExperientialBasis()
   :outertype: DefaultVettedMetaphor

hasHasMappings
^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasMappings()
   :outertype: DefaultVettedMetaphor

hasHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasMetaphorLevel()
   :outertype: DefaultVettedMetaphor

hasHasMetaphorType
^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasMetaphorType()
   :outertype: DefaultVettedMetaphor

hasHasName
^^^^^^^^^^

.. java:method:: public boolean hasHasName()
   :outertype: DefaultVettedMetaphor

hasHasNameGloss
^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasNameGloss()
   :outertype: DefaultVettedMetaphor

hasHasSourceSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasSourceSchema()
   :outertype: DefaultVettedMetaphor

hasHasTargetSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasTargetSchema()
   :outertype: DefaultVettedMetaphor

hasHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasTransitiveSubpart1Metaphor()
   :outertype: DefaultVettedMetaphor

hasHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasTransitiveSubpart2Metaphor()
   :outertype: DefaultVettedMetaphor

hasIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsEntailedByMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsFromLanguage()
   :outertype: DefaultVettedMetaphor

hasIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsInMetaphorFamily()
   :outertype: DefaultVettedMetaphor

hasIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsRelatedToMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsRelatedToMetaphorBySource()
   :outertype: DefaultVettedMetaphor

hasIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsRelatedToMetaphorByTarget()
   :outertype: DefaultVettedMetaphor

hasIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsSourceSubcaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsSourceSupercaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsSubcaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsSupercaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsTargetSubcaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsTargetSupercaseOfMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsTransitiveSubpart1OfMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsTransitiveSubpart2OfMetaphor()
   :outertype: DefaultVettedMetaphor

hasIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsUsedByMetaphor()
   :outertype: DefaultVettedMetaphor

hasMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasMakesUseOfMetaphor()
   :outertype: DefaultVettedMetaphor

hasWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasWasInvestigatedFor()
   :outertype: DefaultVettedMetaphor

removeEntailsMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeEntailsMetaphor(Metaphor oldEntailsMetaphor)
   :outertype: DefaultVettedMetaphor

removeHasAlias
^^^^^^^^^^^^^^

.. java:method:: public void removeHasAlias(Object oldHasAlias)
   :outertype: DefaultVettedMetaphor

removeHasEntailment
^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasEntailment(Entailment oldHasEntailment)
   :outertype: DefaultVettedMetaphor

removeHasExample
^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasExample(Example oldHasExample)
   :outertype: DefaultVettedMetaphor

removeHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasExperientialBasis(String oldHasExperientialBasis)
   :outertype: DefaultVettedMetaphor

removeHasMappings
^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasMappings(Mapping oldHasMappings)
   :outertype: DefaultVettedMetaphor

removeHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasMetaphorLevel(String oldHasMetaphorLevel)
   :outertype: DefaultVettedMetaphor

removeHasMetaphorType
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasMetaphorType(String oldHasMetaphorType)
   :outertype: DefaultVettedMetaphor

removeHasName
^^^^^^^^^^^^^

.. java:method:: public void removeHasName(String oldHasName)
   :outertype: DefaultVettedMetaphor

removeHasNameGloss
^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasNameGloss(String oldHasNameGloss)
   :outertype: DefaultVettedMetaphor

removeHasSourceSchema
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasSourceSchema(Schema oldHasSourceSchema)
   :outertype: DefaultVettedMetaphor

removeHasTargetSchema
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasTargetSchema(Schema oldHasTargetSchema)
   :outertype: DefaultVettedMetaphor

removeHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasTransitiveSubpart1Metaphor(Metaphor oldHasTransitiveSubpart1Metaphor)
   :outertype: DefaultVettedMetaphor

removeHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasTransitiveSubpart2Metaphor(Metaphor oldHasTransitiveSubpart2Metaphor)
   :outertype: DefaultVettedMetaphor

removeIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsEntailedByMetaphor(Metaphor oldIsEntailedByMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsFromLanguage
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsFromLanguage(String oldIsFromLanguage)
   :outertype: DefaultVettedMetaphor

removeIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsInMetaphorFamily(MetaphorFamily oldIsInMetaphorFamily)
   :outertype: DefaultVettedMetaphor

removeIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsRelatedToMetaphor(Metaphor oldIsRelatedToMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsRelatedToMetaphorBySource(Metaphor oldIsRelatedToMetaphorBySource)
   :outertype: DefaultVettedMetaphor

removeIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsRelatedToMetaphorByTarget(Metaphor oldIsRelatedToMetaphorByTarget)
   :outertype: DefaultVettedMetaphor

removeIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsSourceSubcaseOfMetaphor(Metaphor oldIsSourceSubcaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsSourceSupercaseOfMetaphor(Metaphor oldIsSourceSupercaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsSubcaseOfMetaphor(Metaphor oldIsSubcaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsSupercaseOfMetaphor(Metaphor oldIsSupercaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsTargetSubcaseOfMetaphor(Metaphor oldIsTargetSubcaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsTargetSupercaseOfMetaphor(Metaphor oldIsTargetSupercaseOfMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsTransitiveSubpart1OfMetaphor(Metaphor oldIsTransitiveSubpart1OfMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsTransitiveSubpart2OfMetaphor(Metaphor oldIsTransitiveSubpart2OfMetaphor)
   :outertype: DefaultVettedMetaphor

removeIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsUsedByMetaphor(Metaphor oldIsUsedByMetaphor)
   :outertype: DefaultVettedMetaphor

removeMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeMakesUseOfMetaphor(Metaphor oldMakesUseOfMetaphor)
   :outertype: DefaultVettedMetaphor

removeWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeWasInvestigatedFor(String oldWasInvestigatedFor)
   :outertype: DefaultVettedMetaphor

