.. java:import:: java.util Collection

.. java:import:: org.protege.owl.codegeneration WrappedIndividual

.. java:import:: org.semanticweb.owlapi.model OWLNamedIndividual

.. java:import:: org.semanticweb.owlapi.model OWLOntology

VettedMetaphor
==============

.. java:package:: edu.berkeley.icsi.metanet.repository
   :noindex:

.. java:type:: public interface VettedMetaphor extends Metaphor

   Generated by Protege (http://protege.stanford.edu).  Source Class: VettedMetaphor

Methods
-------
addEntailsMetaphor
^^^^^^^^^^^^^^^^^^

.. java:method::  void addEntailsMetaphor(Metaphor newEntailsMetaphor)
   :outertype: VettedMetaphor

   Adds a entailsMetaphor property value.

   :param newEntailsMetaphor: the entailsMetaphor property value to be added

addHasAlias
^^^^^^^^^^^

.. java:method::  void addHasAlias(Object newHasAlias)
   :outertype: VettedMetaphor

   Adds a hasAlias property value.

   :param newHasAlias: the hasAlias property value to be added

addHasEntailment
^^^^^^^^^^^^^^^^

.. java:method::  void addHasEntailment(Entailment newHasEntailment)
   :outertype: VettedMetaphor

   Adds a hasEntailment property value.

   :param newHasEntailment: the hasEntailment property value to be added

addHasExample
^^^^^^^^^^^^^

.. java:method::  void addHasExample(Example newHasExample)
   :outertype: VettedMetaphor

   Adds a hasExample property value.

   :param newHasExample: the hasExample property value to be added

addHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addHasExperientialBasis(String newHasExperientialBasis)
   :outertype: VettedMetaphor

   Adds a hasExperientialBasis property value.

   :param newHasExperientialBasis: the hasExperientialBasis property value to be added

addHasMappings
^^^^^^^^^^^^^^

.. java:method::  void addHasMappings(Mapping newHasMappings)
   :outertype: VettedMetaphor

   Adds a hasMappings property value.

   :param newHasMappings: the hasMappings property value to be added

addHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^

.. java:method::  void addHasMetaphorLevel(String newHasMetaphorLevel)
   :outertype: VettedMetaphor

   Adds a hasMetaphorLevel property value.

   :param newHasMetaphorLevel: the hasMetaphorLevel property value to be added

addHasMetaphorType
^^^^^^^^^^^^^^^^^^

.. java:method::  void addHasMetaphorType(String newHasMetaphorType)
   :outertype: VettedMetaphor

   Adds a hasMetaphorType property value.

   :param newHasMetaphorType: the hasMetaphorType property value to be added

addHasName
^^^^^^^^^^

.. java:method::  void addHasName(String newHasName)
   :outertype: VettedMetaphor

   Adds a hasName property value.

   :param newHasName: the hasName property value to be added

addHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  void addHasNameGloss(String newHasNameGloss)
   :outertype: VettedMetaphor

   Adds a hasNameGloss property value.

   :param newHasNameGloss: the hasNameGloss property value to be added

addHasSourceSchema
^^^^^^^^^^^^^^^^^^

.. java:method::  void addHasSourceSchema(Schema newHasSourceSchema)
   :outertype: VettedMetaphor

   Adds a hasSourceSchema property value.

   :param newHasSourceSchema: the hasSourceSchema property value to be added

addHasTargetSchema
^^^^^^^^^^^^^^^^^^

.. java:method::  void addHasTargetSchema(Schema newHasTargetSchema)
   :outertype: VettedMetaphor

   Adds a hasTargetSchema property value.

   :param newHasTargetSchema: the hasTargetSchema property value to be added

addHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addHasTransitiveSubpart1Metaphor(Metaphor newHasTransitiveSubpart1Metaphor)
   :outertype: VettedMetaphor

   Adds a hasTransitiveSubpart1Metaphor property value.

   :param newHasTransitiveSubpart1Metaphor: the hasTransitiveSubpart1Metaphor property value to be added

addHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addHasTransitiveSubpart2Metaphor(Metaphor newHasTransitiveSubpart2Metaphor)
   :outertype: VettedMetaphor

   Adds a hasTransitiveSubpart2Metaphor property value.

   :param newHasTransitiveSubpart2Metaphor: the hasTransitiveSubpart2Metaphor property value to be added

addIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsEntailedByMetaphor(Metaphor newIsEntailedByMetaphor)
   :outertype: VettedMetaphor

   Adds a isEntailedByMetaphor property value.

   :param newIsEntailedByMetaphor: the isEntailedByMetaphor property value to be added

addIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  void addIsFromLanguage(String newIsFromLanguage)
   :outertype: VettedMetaphor

   Adds a isFromLanguage property value.

   :param newIsFromLanguage: the isFromLanguage property value to be added

addIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsInMetaphorFamily(MetaphorFamily newIsInMetaphorFamily)
   :outertype: VettedMetaphor

   Adds a isInMetaphorFamily property value.

   :param newIsInMetaphorFamily: the isInMetaphorFamily property value to be added

addIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsRelatedToMetaphor(Metaphor newIsRelatedToMetaphor)
   :outertype: VettedMetaphor

   Adds a isRelatedToMetaphor property value.

   :param newIsRelatedToMetaphor: the isRelatedToMetaphor property value to be added

addIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsRelatedToMetaphorBySource(Metaphor newIsRelatedToMetaphorBySource)
   :outertype: VettedMetaphor

   Adds a isRelatedToMetaphorBySource property value.

   :param newIsRelatedToMetaphorBySource: the isRelatedToMetaphorBySource property value to be added

addIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsRelatedToMetaphorByTarget(Metaphor newIsRelatedToMetaphorByTarget)
   :outertype: VettedMetaphor

   Adds a isRelatedToMetaphorByTarget property value.

   :param newIsRelatedToMetaphorByTarget: the isRelatedToMetaphorByTarget property value to be added

addIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsSourceSubcaseOfMetaphor(Metaphor newIsSourceSubcaseOfMetaphor)
   :outertype: VettedMetaphor

   Adds a isSourceSubcaseOfMetaphor property value.

   :param newIsSourceSubcaseOfMetaphor: the isSourceSubcaseOfMetaphor property value to be added

addIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsSourceSupercaseOfMetaphor(Metaphor newIsSourceSupercaseOfMetaphor)
   :outertype: VettedMetaphor

   Adds a isSourceSupercaseOfMetaphor property value.

   :param newIsSourceSupercaseOfMetaphor: the isSourceSupercaseOfMetaphor property value to be added

addIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsSubcaseOfMetaphor(Metaphor newIsSubcaseOfMetaphor)
   :outertype: VettedMetaphor

   Adds a isSubcaseOfMetaphor property value.

   :param newIsSubcaseOfMetaphor: the isSubcaseOfMetaphor property value to be added

addIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsSupercaseOfMetaphor(Metaphor newIsSupercaseOfMetaphor)
   :outertype: VettedMetaphor

   Adds a isSupercaseOfMetaphor property value.

   :param newIsSupercaseOfMetaphor: the isSupercaseOfMetaphor property value to be added

addIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsTargetSubcaseOfMetaphor(Metaphor newIsTargetSubcaseOfMetaphor)
   :outertype: VettedMetaphor

   Adds a isTargetSubcaseOfMetaphor property value.

   :param newIsTargetSubcaseOfMetaphor: the isTargetSubcaseOfMetaphor property value to be added

addIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsTargetSupercaseOfMetaphor(Metaphor newIsTargetSupercaseOfMetaphor)
   :outertype: VettedMetaphor

   Adds a isTargetSupercaseOfMetaphor property value.

   :param newIsTargetSupercaseOfMetaphor: the isTargetSupercaseOfMetaphor property value to be added

addIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsTransitiveSubpart1OfMetaphor(Metaphor newIsTransitiveSubpart1OfMetaphor)
   :outertype: VettedMetaphor

   Adds a isTransitiveSubpart1OfMetaphor property value.

   :param newIsTransitiveSubpart1OfMetaphor: the isTransitiveSubpart1OfMetaphor property value to be added

addIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsTransitiveSubpart2OfMetaphor(Metaphor newIsTransitiveSubpart2OfMetaphor)
   :outertype: VettedMetaphor

   Adds a isTransitiveSubpart2OfMetaphor property value.

   :param newIsTransitiveSubpart2OfMetaphor: the isTransitiveSubpart2OfMetaphor property value to be added

addIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsUsedByMetaphor(Metaphor newIsUsedByMetaphor)
   :outertype: VettedMetaphor

   Adds a isUsedByMetaphor property value.

   :param newIsUsedByMetaphor: the isUsedByMetaphor property value to be added

addMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addMakesUseOfMetaphor(Metaphor newMakesUseOfMetaphor)
   :outertype: VettedMetaphor

   Adds a makesUseOfMetaphor property value.

   :param newMakesUseOfMetaphor: the makesUseOfMetaphor property value to be added

addWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addWasInvestigatedFor(String newWasInvestigatedFor)
   :outertype: VettedMetaphor

   Adds a wasInvestigatedFor property value.

   :param newWasInvestigatedFor: the wasInvestigatedFor property value to be added

delete
^^^^^^

.. java:method::  void delete()
   :outertype: VettedMetaphor

getEntailsMetaphor
^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getEntailsMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the entailsMetaphor property.

getHasAlias
^^^^^^^^^^^

.. java:method::  Collection<? extends Object> getHasAlias()
   :outertype: VettedMetaphor

   Gets all property values for the hasAlias property.

getHasEntailment
^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Entailment> getHasEntailment()
   :outertype: VettedMetaphor

   Gets all property values for the hasEntailment property.

getHasExample
^^^^^^^^^^^^^

.. java:method::  Collection<? extends Example> getHasExample()
   :outertype: VettedMetaphor

   Gets all property values for the hasExample property.

getHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  String getHasExperientialBasis()
   :outertype: VettedMetaphor

   Gets the value for the hasExperientialBasis functional property.

getHasMappings
^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Mapping> getHasMappings()
   :outertype: VettedMetaphor

   Gets all property values for the hasMappings property.

getHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^

.. java:method::  String getHasMetaphorLevel()
   :outertype: VettedMetaphor

   Gets the value for the hasMetaphorLevel functional property.

getHasMetaphorType
^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends String> getHasMetaphorType()
   :outertype: VettedMetaphor

   Gets all property values for the hasMetaphorType property.

getHasName
^^^^^^^^^^

.. java:method::  String getHasName()
   :outertype: VettedMetaphor

   Gets the value for the hasName functional property.

getHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  String getHasNameGloss()
   :outertype: VettedMetaphor

   Gets the value for the hasNameGloss functional property.

getHasSourceSchema
^^^^^^^^^^^^^^^^^^

.. java:method::  Schema getHasSourceSchema()
   :outertype: VettedMetaphor

   Gets the property value for the hasSourceSchema functional property.

getHasTargetSchema
^^^^^^^^^^^^^^^^^^

.. java:method::  Schema getHasTargetSchema()
   :outertype: VettedMetaphor

   Gets the property value for the hasTargetSchema functional property.

getHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getHasTransitiveSubpart1Metaphor()
   :outertype: VettedMetaphor

   Gets all property values for the hasTransitiveSubpart1Metaphor property.

getHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getHasTransitiveSubpart2Metaphor()
   :outertype: VettedMetaphor

   Gets all property values for the hasTransitiveSubpart2Metaphor property.

getIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsEntailedByMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isEntailedByMetaphor property.

getIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  String getIsFromLanguage()
   :outertype: VettedMetaphor

   Gets the value for the isFromLanguage functional property.

getIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends MetaphorFamily> getIsInMetaphorFamily()
   :outertype: VettedMetaphor

   Gets all property values for the isInMetaphorFamily property.

getIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsRelatedToMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isRelatedToMetaphor property.

getIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsRelatedToMetaphorBySource()
   :outertype: VettedMetaphor

   Gets all property values for the isRelatedToMetaphorBySource property.

getIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsRelatedToMetaphorByTarget()
   :outertype: VettedMetaphor

   Gets all property values for the isRelatedToMetaphorByTarget property.

getIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsSourceSubcaseOfMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isSourceSubcaseOfMetaphor property.

getIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsSourceSupercaseOfMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isSourceSupercaseOfMetaphor property.

getIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsSubcaseOfMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isSubcaseOfMetaphor property.

getIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsSupercaseOfMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isSupercaseOfMetaphor property.

getIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsTargetSubcaseOfMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isTargetSubcaseOfMetaphor property.

getIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsTargetSupercaseOfMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isTargetSupercaseOfMetaphor property.

getIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsTransitiveSubpart1OfMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isTransitiveSubpart1OfMetaphor property.

getIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsTransitiveSubpart2OfMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isTransitiveSubpart2OfMetaphor property.

getIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsUsedByMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the isUsedByMetaphor property.

getMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getMakesUseOfMetaphor()
   :outertype: VettedMetaphor

   Gets all property values for the makesUseOfMetaphor property.

getOwlIndividual
^^^^^^^^^^^^^^^^

.. java:method::  OWLNamedIndividual getOwlIndividual()
   :outertype: VettedMetaphor

getOwlOntology
^^^^^^^^^^^^^^

.. java:method::  OWLOntology getOwlOntology()
   :outertype: VettedMetaphor

getWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends String> getWasInvestigatedFor()
   :outertype: VettedMetaphor

   Gets all property values for the wasInvestigatedFor property.

hasEntailsMetaphor
^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasEntailsMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a entailsMetaphor property value.

   :return: true if there is a entailsMetaphor property value.

hasHasAlias
^^^^^^^^^^^

.. java:method::  boolean hasHasAlias()
   :outertype: VettedMetaphor

   Checks if the class has a hasAlias property value.

   :return: true if there is a hasAlias property value.

hasHasEntailment
^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasEntailment()
   :outertype: VettedMetaphor

   Checks if the class has a hasEntailment property value.

   :return: true if there is a hasEntailment property value.

hasHasExample
^^^^^^^^^^^^^

.. java:method::  boolean hasHasExample()
   :outertype: VettedMetaphor

   Checks if the class has a hasExample property value.

   :return: true if there is a hasExample property value.

hasHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasExperientialBasis()
   :outertype: VettedMetaphor

   Checks if the class has a hasExperientialBasis property value.

   :return: true if there is a hasExperientialBasis property value.

hasHasMappings
^^^^^^^^^^^^^^

.. java:method::  boolean hasHasMappings()
   :outertype: VettedMetaphor

   Checks if the class has a hasMappings property value.

   :return: true if there is a hasMappings property value.

hasHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasMetaphorLevel()
   :outertype: VettedMetaphor

   Checks if the class has a hasMetaphorLevel property value.

   :return: true if there is a hasMetaphorLevel property value.

hasHasMetaphorType
^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasMetaphorType()
   :outertype: VettedMetaphor

   Checks if the class has a hasMetaphorType property value.

   :return: true if there is a hasMetaphorType property value.

hasHasName
^^^^^^^^^^

.. java:method::  boolean hasHasName()
   :outertype: VettedMetaphor

   Checks if the class has a hasName property value.

   :return: true if there is a hasName property value.

hasHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasNameGloss()
   :outertype: VettedMetaphor

   Checks if the class has a hasNameGloss property value.

   :return: true if there is a hasNameGloss property value.

hasHasSourceSchema
^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasSourceSchema()
   :outertype: VettedMetaphor

   Checks if the class has a hasSourceSchema property value.

   :return: true if there is a hasSourceSchema property value.

hasHasTargetSchema
^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasTargetSchema()
   :outertype: VettedMetaphor

   Checks if the class has a hasTargetSchema property value.

   :return: true if there is a hasTargetSchema property value.

hasHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasTransitiveSubpart1Metaphor()
   :outertype: VettedMetaphor

   Checks if the class has a hasTransitiveSubpart1Metaphor property value.

   :return: true if there is a hasTransitiveSubpart1Metaphor property value.

hasHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasTransitiveSubpart2Metaphor()
   :outertype: VettedMetaphor

   Checks if the class has a hasTransitiveSubpart2Metaphor property value.

   :return: true if there is a hasTransitiveSubpart2Metaphor property value.

hasIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsEntailedByMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isEntailedByMetaphor property value.

   :return: true if there is a isEntailedByMetaphor property value.

hasIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsFromLanguage()
   :outertype: VettedMetaphor

   Checks if the class has a isFromLanguage property value.

   :return: true if there is a isFromLanguage property value.

hasIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsInMetaphorFamily()
   :outertype: VettedMetaphor

   Checks if the class has a isInMetaphorFamily property value.

   :return: true if there is a isInMetaphorFamily property value.

hasIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsRelatedToMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isRelatedToMetaphor property value.

   :return: true if there is a isRelatedToMetaphor property value.

hasIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsRelatedToMetaphorBySource()
   :outertype: VettedMetaphor

   Checks if the class has a isRelatedToMetaphorBySource property value.

   :return: true if there is a isRelatedToMetaphorBySource property value.

hasIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsRelatedToMetaphorByTarget()
   :outertype: VettedMetaphor

   Checks if the class has a isRelatedToMetaphorByTarget property value.

   :return: true if there is a isRelatedToMetaphorByTarget property value.

hasIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsSourceSubcaseOfMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isSourceSubcaseOfMetaphor property value.

   :return: true if there is a isSourceSubcaseOfMetaphor property value.

hasIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsSourceSupercaseOfMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isSourceSupercaseOfMetaphor property value.

   :return: true if there is a isSourceSupercaseOfMetaphor property value.

hasIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsSubcaseOfMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isSubcaseOfMetaphor property value.

   :return: true if there is a isSubcaseOfMetaphor property value.

hasIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsSupercaseOfMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isSupercaseOfMetaphor property value.

   :return: true if there is a isSupercaseOfMetaphor property value.

hasIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsTargetSubcaseOfMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isTargetSubcaseOfMetaphor property value.

   :return: true if there is a isTargetSubcaseOfMetaphor property value.

hasIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsTargetSupercaseOfMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isTargetSupercaseOfMetaphor property value.

   :return: true if there is a isTargetSupercaseOfMetaphor property value.

hasIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsTransitiveSubpart1OfMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isTransitiveSubpart1OfMetaphor property value.

   :return: true if there is a isTransitiveSubpart1OfMetaphor property value.

hasIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsTransitiveSubpart2OfMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isTransitiveSubpart2OfMetaphor property value.

   :return: true if there is a isTransitiveSubpart2OfMetaphor property value.

hasIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsUsedByMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a isUsedByMetaphor property value.

   :return: true if there is a isUsedByMetaphor property value.

hasMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasMakesUseOfMetaphor()
   :outertype: VettedMetaphor

   Checks if the class has a makesUseOfMetaphor property value.

   :return: true if there is a makesUseOfMetaphor property value.

hasWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasWasInvestigatedFor()
   :outertype: VettedMetaphor

   Checks if the class has a wasInvestigatedFor property value.

   :return: true if there is a wasInvestigatedFor property value.

removeEntailsMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeEntailsMetaphor(Metaphor oldEntailsMetaphor)
   :outertype: VettedMetaphor

   Removes a entailsMetaphor property value.

   :param oldEntailsMetaphor: the entailsMetaphor property value to be removed.

removeHasAlias
^^^^^^^^^^^^^^

.. java:method::  void removeHasAlias(Object oldHasAlias)
   :outertype: VettedMetaphor

   Removes a hasAlias property value.

   :param oldHasAlias: the hasAlias property value to be removed.

removeHasEntailment
^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasEntailment(Entailment oldHasEntailment)
   :outertype: VettedMetaphor

   Removes a hasEntailment property value.

   :param oldHasEntailment: the hasEntailment property value to be removed.

removeHasExample
^^^^^^^^^^^^^^^^

.. java:method::  void removeHasExample(Example oldHasExample)
   :outertype: VettedMetaphor

   Removes a hasExample property value.

   :param oldHasExample: the hasExample property value to be removed.

removeHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasExperientialBasis(String oldHasExperientialBasis)
   :outertype: VettedMetaphor

   Removes a hasExperientialBasis property value.

   :param oldHasExperientialBasis: the hasExperientialBasis property value to be removed.

removeHasMappings
^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasMappings(Mapping oldHasMappings)
   :outertype: VettedMetaphor

   Removes a hasMappings property value.

   :param oldHasMappings: the hasMappings property value to be removed.

removeHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasMetaphorLevel(String oldHasMetaphorLevel)
   :outertype: VettedMetaphor

   Removes a hasMetaphorLevel property value.

   :param oldHasMetaphorLevel: the hasMetaphorLevel property value to be removed.

removeHasMetaphorType
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasMetaphorType(String oldHasMetaphorType)
   :outertype: VettedMetaphor

   Removes a hasMetaphorType property value.

   :param oldHasMetaphorType: the hasMetaphorType property value to be removed.

removeHasName
^^^^^^^^^^^^^

.. java:method::  void removeHasName(String oldHasName)
   :outertype: VettedMetaphor

   Removes a hasName property value.

   :param oldHasName: the hasName property value to be removed.

removeHasNameGloss
^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasNameGloss(String oldHasNameGloss)
   :outertype: VettedMetaphor

   Removes a hasNameGloss property value.

   :param oldHasNameGloss: the hasNameGloss property value to be removed.

removeHasSourceSchema
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasSourceSchema(Schema oldHasSourceSchema)
   :outertype: VettedMetaphor

   Removes a hasSourceSchema property value.

   :param oldHasSourceSchema: the hasSourceSchema property value to be removed.

removeHasTargetSchema
^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasTargetSchema(Schema oldHasTargetSchema)
   :outertype: VettedMetaphor

   Removes a hasTargetSchema property value.

   :param oldHasTargetSchema: the hasTargetSchema property value to be removed.

removeHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasTransitiveSubpart1Metaphor(Metaphor oldHasTransitiveSubpart1Metaphor)
   :outertype: VettedMetaphor

   Removes a hasTransitiveSubpart1Metaphor property value.

   :param oldHasTransitiveSubpart1Metaphor: the hasTransitiveSubpart1Metaphor property value to be removed.

removeHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasTransitiveSubpart2Metaphor(Metaphor oldHasTransitiveSubpart2Metaphor)
   :outertype: VettedMetaphor

   Removes a hasTransitiveSubpart2Metaphor property value.

   :param oldHasTransitiveSubpart2Metaphor: the hasTransitiveSubpart2Metaphor property value to be removed.

removeIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsEntailedByMetaphor(Metaphor oldIsEntailedByMetaphor)
   :outertype: VettedMetaphor

   Removes a isEntailedByMetaphor property value.

   :param oldIsEntailedByMetaphor: the isEntailedByMetaphor property value to be removed.

removeIsFromLanguage
^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsFromLanguage(String oldIsFromLanguage)
   :outertype: VettedMetaphor

   Removes a isFromLanguage property value.

   :param oldIsFromLanguage: the isFromLanguage property value to be removed.

removeIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsInMetaphorFamily(MetaphorFamily oldIsInMetaphorFamily)
   :outertype: VettedMetaphor

   Removes a isInMetaphorFamily property value.

   :param oldIsInMetaphorFamily: the isInMetaphorFamily property value to be removed.

removeIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsRelatedToMetaphor(Metaphor oldIsRelatedToMetaphor)
   :outertype: VettedMetaphor

   Removes a isRelatedToMetaphor property value.

   :param oldIsRelatedToMetaphor: the isRelatedToMetaphor property value to be removed.

removeIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsRelatedToMetaphorBySource(Metaphor oldIsRelatedToMetaphorBySource)
   :outertype: VettedMetaphor

   Removes a isRelatedToMetaphorBySource property value.

   :param oldIsRelatedToMetaphorBySource: the isRelatedToMetaphorBySource property value to be removed.

removeIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsRelatedToMetaphorByTarget(Metaphor oldIsRelatedToMetaphorByTarget)
   :outertype: VettedMetaphor

   Removes a isRelatedToMetaphorByTarget property value.

   :param oldIsRelatedToMetaphorByTarget: the isRelatedToMetaphorByTarget property value to be removed.

removeIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsSourceSubcaseOfMetaphor(Metaphor oldIsSourceSubcaseOfMetaphor)
   :outertype: VettedMetaphor

   Removes a isSourceSubcaseOfMetaphor property value.

   :param oldIsSourceSubcaseOfMetaphor: the isSourceSubcaseOfMetaphor property value to be removed.

removeIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsSourceSupercaseOfMetaphor(Metaphor oldIsSourceSupercaseOfMetaphor)
   :outertype: VettedMetaphor

   Removes a isSourceSupercaseOfMetaphor property value.

   :param oldIsSourceSupercaseOfMetaphor: the isSourceSupercaseOfMetaphor property value to be removed.

removeIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsSubcaseOfMetaphor(Metaphor oldIsSubcaseOfMetaphor)
   :outertype: VettedMetaphor

   Removes a isSubcaseOfMetaphor property value.

   :param oldIsSubcaseOfMetaphor: the isSubcaseOfMetaphor property value to be removed.

removeIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsSupercaseOfMetaphor(Metaphor oldIsSupercaseOfMetaphor)
   :outertype: VettedMetaphor

   Removes a isSupercaseOfMetaphor property value.

   :param oldIsSupercaseOfMetaphor: the isSupercaseOfMetaphor property value to be removed.

removeIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsTargetSubcaseOfMetaphor(Metaphor oldIsTargetSubcaseOfMetaphor)
   :outertype: VettedMetaphor

   Removes a isTargetSubcaseOfMetaphor property value.

   :param oldIsTargetSubcaseOfMetaphor: the isTargetSubcaseOfMetaphor property value to be removed.

removeIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsTargetSupercaseOfMetaphor(Metaphor oldIsTargetSupercaseOfMetaphor)
   :outertype: VettedMetaphor

   Removes a isTargetSupercaseOfMetaphor property value.

   :param oldIsTargetSupercaseOfMetaphor: the isTargetSupercaseOfMetaphor property value to be removed.

removeIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsTransitiveSubpart1OfMetaphor(Metaphor oldIsTransitiveSubpart1OfMetaphor)
   :outertype: VettedMetaphor

   Removes a isTransitiveSubpart1OfMetaphor property value.

   :param oldIsTransitiveSubpart1OfMetaphor: the isTransitiveSubpart1OfMetaphor property value to be removed.

removeIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsTransitiveSubpart2OfMetaphor(Metaphor oldIsTransitiveSubpart2OfMetaphor)
   :outertype: VettedMetaphor

   Removes a isTransitiveSubpart2OfMetaphor property value.

   :param oldIsTransitiveSubpart2OfMetaphor: the isTransitiveSubpart2OfMetaphor property value to be removed.

removeIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsUsedByMetaphor(Metaphor oldIsUsedByMetaphor)
   :outertype: VettedMetaphor

   Removes a isUsedByMetaphor property value.

   :param oldIsUsedByMetaphor: the isUsedByMetaphor property value to be removed.

removeMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeMakesUseOfMetaphor(Metaphor oldMakesUseOfMetaphor)
   :outertype: VettedMetaphor

   Removes a makesUseOfMetaphor property value.

   :param oldMakesUseOfMetaphor: the makesUseOfMetaphor property value to be removed.

removeWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeWasInvestigatedFor(String oldWasInvestigatedFor)
   :outertype: VettedMetaphor

   Removes a wasInvestigatedFor property value.

   :param oldWasInvestigatedFor: the wasInvestigatedFor property value to be removed.

