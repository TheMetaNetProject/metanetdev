.. java:import:: java.util Collection

.. java:import:: org.protege.owl.codegeneration WrappedIndividual

.. java:import:: org.protege.owl.codegeneration.impl WrappedIndividualImpl

.. java:import:: org.protege.owl.codegeneration.inference CodeGenerationInference

.. java:import:: org.semanticweb.owlapi.model IRI

.. java:import:: org.semanticweb.owlapi.model OWLOntology

DefaultAutoMetaphor
===================

.. java:package:: edu.berkeley.icsi.metanet.repository.impl
   :noindex:

.. java:type:: public class DefaultAutoMetaphor extends WrappedIndividualImpl implements AutoMetaphor

   Generated by Protege (http://protege.stanford.edu). Source Class: DefaultAutoMetaphor

Constructors
------------
DefaultAutoMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:constructor:: public DefaultAutoMetaphor(OWLOntology ontology, IRI iri, CodeGenerationInference inf)
   :outertype: DefaultAutoMetaphor

Methods
-------
addEntailsMetaphor
^^^^^^^^^^^^^^^^^^

.. java:method:: public void addEntailsMetaphor(Metaphor newEntailsMetaphor)
   :outertype: DefaultAutoMetaphor

addHasAlias
^^^^^^^^^^^

.. java:method:: public void addHasAlias(Object newHasAlias)
   :outertype: DefaultAutoMetaphor

addHasEntailment
^^^^^^^^^^^^^^^^

.. java:method:: public void addHasEntailment(Entailment newHasEntailment)
   :outertype: DefaultAutoMetaphor

addHasExample
^^^^^^^^^^^^^

.. java:method:: public void addHasExample(Example newHasExample)
   :outertype: DefaultAutoMetaphor

addHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasExperientialBasis(String newHasExperientialBasis)
   :outertype: DefaultAutoMetaphor

addHasMappings
^^^^^^^^^^^^^^

.. java:method:: public void addHasMappings(Mapping newHasMappings)
   :outertype: DefaultAutoMetaphor

addHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasMetaphorLevel(String newHasMetaphorLevel)
   :outertype: DefaultAutoMetaphor

addHasMetaphorType
^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasMetaphorType(String newHasMetaphorType)
   :outertype: DefaultAutoMetaphor

addHasName
^^^^^^^^^^

.. java:method:: public void addHasName(String newHasName)
   :outertype: DefaultAutoMetaphor

addHasNameGloss
^^^^^^^^^^^^^^^

.. java:method:: public void addHasNameGloss(String newHasNameGloss)
   :outertype: DefaultAutoMetaphor

addHasSourceSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasSourceSchema(Schema newHasSourceSchema)
   :outertype: DefaultAutoMetaphor

addHasTargetSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasTargetSchema(Schema newHasTargetSchema)
   :outertype: DefaultAutoMetaphor

addHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasTransitiveSubpart1Metaphor(Metaphor newHasTransitiveSubpart1Metaphor)
   :outertype: DefaultAutoMetaphor

addHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addHasTransitiveSubpart2Metaphor(Metaphor newHasTransitiveSubpart2Metaphor)
   :outertype: DefaultAutoMetaphor

addIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsEntailedByMetaphor(Metaphor newIsEntailedByMetaphor)
   :outertype: DefaultAutoMetaphor

addIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsFromLanguage(String newIsFromLanguage)
   :outertype: DefaultAutoMetaphor

addIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsInMetaphorFamily(MetaphorFamily newIsInMetaphorFamily)
   :outertype: DefaultAutoMetaphor

addIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsRelatedToMetaphor(Metaphor newIsRelatedToMetaphor)
   :outertype: DefaultAutoMetaphor

addIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsRelatedToMetaphorBySource(Metaphor newIsRelatedToMetaphorBySource)
   :outertype: DefaultAutoMetaphor

addIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsRelatedToMetaphorByTarget(Metaphor newIsRelatedToMetaphorByTarget)
   :outertype: DefaultAutoMetaphor

addIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsSourceSubcaseOfMetaphor(Metaphor newIsSourceSubcaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

addIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsSourceSupercaseOfMetaphor(Metaphor newIsSourceSupercaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

addIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsSubcaseOfMetaphor(Metaphor newIsSubcaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

addIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsSupercaseOfMetaphor(Metaphor newIsSupercaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

addIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsTargetSubcaseOfMetaphor(Metaphor newIsTargetSubcaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

addIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsTargetSupercaseOfMetaphor(Metaphor newIsTargetSupercaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

addIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsTransitiveSubpart1OfMetaphor(Metaphor newIsTransitiveSubpart1OfMetaphor)
   :outertype: DefaultAutoMetaphor

addIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsTransitiveSubpart2OfMetaphor(Metaphor newIsTransitiveSubpart2OfMetaphor)
   :outertype: DefaultAutoMetaphor

addIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addIsUsedByMetaphor(Metaphor newIsUsedByMetaphor)
   :outertype: DefaultAutoMetaphor

addMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addMakesUseOfMetaphor(Metaphor newMakesUseOfMetaphor)
   :outertype: DefaultAutoMetaphor

addWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void addWasInvestigatedFor(String newWasInvestigatedFor)
   :outertype: DefaultAutoMetaphor

getEntailsMetaphor
^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getEntailsMetaphor()
   :outertype: DefaultAutoMetaphor

getHasAlias
^^^^^^^^^^^

.. java:method:: public Collection<? extends Object> getHasAlias()
   :outertype: DefaultAutoMetaphor

getHasEntailment
^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Entailment> getHasEntailment()
   :outertype: DefaultAutoMetaphor

getHasExample
^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Example> getHasExample()
   :outertype: DefaultAutoMetaphor

getHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public String getHasExperientialBasis()
   :outertype: DefaultAutoMetaphor

getHasMappings
^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Mapping> getHasMappings()
   :outertype: DefaultAutoMetaphor

getHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^

.. java:method:: public String getHasMetaphorLevel()
   :outertype: DefaultAutoMetaphor

getHasMetaphorType
^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends String> getHasMetaphorType()
   :outertype: DefaultAutoMetaphor

getHasName
^^^^^^^^^^

.. java:method:: public String getHasName()
   :outertype: DefaultAutoMetaphor

getHasNameGloss
^^^^^^^^^^^^^^^

.. java:method:: public String getHasNameGloss()
   :outertype: DefaultAutoMetaphor

getHasSourceSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public Schema getHasSourceSchema()
   :outertype: DefaultAutoMetaphor

getHasTargetSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public Schema getHasTargetSchema()
   :outertype: DefaultAutoMetaphor

getHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getHasTransitiveSubpart1Metaphor()
   :outertype: DefaultAutoMetaphor

getHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getHasTransitiveSubpart2Metaphor()
   :outertype: DefaultAutoMetaphor

getIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsEntailedByMetaphor()
   :outertype: DefaultAutoMetaphor

getIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method:: public String getIsFromLanguage()
   :outertype: DefaultAutoMetaphor

getIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends MetaphorFamily> getIsInMetaphorFamily()
   :outertype: DefaultAutoMetaphor

getIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsRelatedToMetaphor()
   :outertype: DefaultAutoMetaphor

getIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsRelatedToMetaphorBySource()
   :outertype: DefaultAutoMetaphor

getIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsRelatedToMetaphorByTarget()
   :outertype: DefaultAutoMetaphor

getIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsSourceSubcaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

getIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsSourceSupercaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

getIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsSubcaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

getIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsSupercaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

getIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsTargetSubcaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

getIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsTargetSupercaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

getIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsTransitiveSubpart1OfMetaphor()
   :outertype: DefaultAutoMetaphor

getIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsTransitiveSubpart2OfMetaphor()
   :outertype: DefaultAutoMetaphor

getIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getIsUsedByMetaphor()
   :outertype: DefaultAutoMetaphor

getMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends Metaphor> getMakesUseOfMetaphor()
   :outertype: DefaultAutoMetaphor

getWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<? extends String> getWasInvestigatedFor()
   :outertype: DefaultAutoMetaphor

hasEntailsMetaphor
^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasEntailsMetaphor()
   :outertype: DefaultAutoMetaphor

hasHasAlias
^^^^^^^^^^^

.. java:method:: public boolean hasHasAlias()
   :outertype: DefaultAutoMetaphor

hasHasEntailment
^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasEntailment()
   :outertype: DefaultAutoMetaphor

hasHasExample
^^^^^^^^^^^^^

.. java:method:: public boolean hasHasExample()
   :outertype: DefaultAutoMetaphor

hasHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasExperientialBasis()
   :outertype: DefaultAutoMetaphor

hasHasMappings
^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasMappings()
   :outertype: DefaultAutoMetaphor

hasHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasMetaphorLevel()
   :outertype: DefaultAutoMetaphor

hasHasMetaphorType
^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasMetaphorType()
   :outertype: DefaultAutoMetaphor

hasHasName
^^^^^^^^^^

.. java:method:: public boolean hasHasName()
   :outertype: DefaultAutoMetaphor

hasHasNameGloss
^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasNameGloss()
   :outertype: DefaultAutoMetaphor

hasHasSourceSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasSourceSchema()
   :outertype: DefaultAutoMetaphor

hasHasTargetSchema
^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasTargetSchema()
   :outertype: DefaultAutoMetaphor

hasHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasTransitiveSubpart1Metaphor()
   :outertype: DefaultAutoMetaphor

hasHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasHasTransitiveSubpart2Metaphor()
   :outertype: DefaultAutoMetaphor

hasIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsEntailedByMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsFromLanguage()
   :outertype: DefaultAutoMetaphor

hasIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsInMetaphorFamily()
   :outertype: DefaultAutoMetaphor

hasIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsRelatedToMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsRelatedToMetaphorBySource()
   :outertype: DefaultAutoMetaphor

hasIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsRelatedToMetaphorByTarget()
   :outertype: DefaultAutoMetaphor

hasIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsSourceSubcaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsSourceSupercaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsSubcaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsSupercaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsTargetSubcaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsTargetSupercaseOfMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsTransitiveSubpart1OfMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsTransitiveSubpart2OfMetaphor()
   :outertype: DefaultAutoMetaphor

hasIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasIsUsedByMetaphor()
   :outertype: DefaultAutoMetaphor

hasMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasMakesUseOfMetaphor()
   :outertype: DefaultAutoMetaphor

hasWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public boolean hasWasInvestigatedFor()
   :outertype: DefaultAutoMetaphor

removeEntailsMetaphor
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeEntailsMetaphor(Metaphor oldEntailsMetaphor)
   :outertype: DefaultAutoMetaphor

removeHasAlias
^^^^^^^^^^^^^^

.. java:method:: public void removeHasAlias(Object oldHasAlias)
   :outertype: DefaultAutoMetaphor

removeHasEntailment
^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasEntailment(Entailment oldHasEntailment)
   :outertype: DefaultAutoMetaphor

removeHasExample
^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasExample(Example oldHasExample)
   :outertype: DefaultAutoMetaphor

removeHasExperientialBasis
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasExperientialBasis(String oldHasExperientialBasis)
   :outertype: DefaultAutoMetaphor

removeHasMappings
^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasMappings(Mapping oldHasMappings)
   :outertype: DefaultAutoMetaphor

removeHasMetaphorLevel
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasMetaphorLevel(String oldHasMetaphorLevel)
   :outertype: DefaultAutoMetaphor

removeHasMetaphorType
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasMetaphorType(String oldHasMetaphorType)
   :outertype: DefaultAutoMetaphor

removeHasName
^^^^^^^^^^^^^

.. java:method:: public void removeHasName(String oldHasName)
   :outertype: DefaultAutoMetaphor

removeHasNameGloss
^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasNameGloss(String oldHasNameGloss)
   :outertype: DefaultAutoMetaphor

removeHasSourceSchema
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasSourceSchema(Schema oldHasSourceSchema)
   :outertype: DefaultAutoMetaphor

removeHasTargetSchema
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasTargetSchema(Schema oldHasTargetSchema)
   :outertype: DefaultAutoMetaphor

removeHasTransitiveSubpart1Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasTransitiveSubpart1Metaphor(Metaphor oldHasTransitiveSubpart1Metaphor)
   :outertype: DefaultAutoMetaphor

removeHasTransitiveSubpart2Metaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeHasTransitiveSubpart2Metaphor(Metaphor oldHasTransitiveSubpart2Metaphor)
   :outertype: DefaultAutoMetaphor

removeIsEntailedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsEntailedByMetaphor(Metaphor oldIsEntailedByMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsFromLanguage
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsFromLanguage(String oldIsFromLanguage)
   :outertype: DefaultAutoMetaphor

removeIsInMetaphorFamily
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsInMetaphorFamily(MetaphorFamily oldIsInMetaphorFamily)
   :outertype: DefaultAutoMetaphor

removeIsRelatedToMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsRelatedToMetaphor(Metaphor oldIsRelatedToMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsRelatedToMetaphorBySource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsRelatedToMetaphorBySource(Metaphor oldIsRelatedToMetaphorBySource)
   :outertype: DefaultAutoMetaphor

removeIsRelatedToMetaphorByTarget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsRelatedToMetaphorByTarget(Metaphor oldIsRelatedToMetaphorByTarget)
   :outertype: DefaultAutoMetaphor

removeIsSourceSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsSourceSubcaseOfMetaphor(Metaphor oldIsSourceSubcaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsSourceSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsSourceSupercaseOfMetaphor(Metaphor oldIsSourceSupercaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsSubcaseOfMetaphor(Metaphor oldIsSubcaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsSupercaseOfMetaphor(Metaphor oldIsSupercaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsTargetSubcaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsTargetSubcaseOfMetaphor(Metaphor oldIsTargetSubcaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsTargetSupercaseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsTargetSupercaseOfMetaphor(Metaphor oldIsTargetSupercaseOfMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsTransitiveSubpart1OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsTransitiveSubpart1OfMetaphor(Metaphor oldIsTransitiveSubpart1OfMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsTransitiveSubpart2OfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsTransitiveSubpart2OfMetaphor(Metaphor oldIsTransitiveSubpart2OfMetaphor)
   :outertype: DefaultAutoMetaphor

removeIsUsedByMetaphor
^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeIsUsedByMetaphor(Metaphor oldIsUsedByMetaphor)
   :outertype: DefaultAutoMetaphor

removeMakesUseOfMetaphor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeMakesUseOfMetaphor(Metaphor oldMakesUseOfMetaphor)
   :outertype: DefaultAutoMetaphor

removeWasInvestigatedFor
^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void removeWasInvestigatedFor(String oldWasInvestigatedFor)
   :outertype: DefaultAutoMetaphor

