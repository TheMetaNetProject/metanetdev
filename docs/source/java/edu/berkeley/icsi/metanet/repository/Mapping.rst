.. java:import:: java.util Collection

.. java:import:: org.protege.owl.codegeneration WrappedIndividual

.. java:import:: org.semanticweb.owlapi.model OWLNamedIndividual

.. java:import:: org.semanticweb.owlapi.model OWLOntology

Mapping
=======

.. java:package:: edu.berkeley.icsi.metanet.repository
   :noindex:

.. java:type:: public interface Mapping extends WrappedIndividual

   Generated by Protege (http://protege.stanford.edu).  Source Class: Mapping

Methods
-------
addHasAlias
^^^^^^^^^^^

.. java:method::  void addHasAlias(Object newHasAlias)
   :outertype: Mapping

   Adds a hasAlias property value.

   :param newHasAlias: the hasAlias property value to be added

addHasExample
^^^^^^^^^^^^^

.. java:method::  void addHasExample(Example newHasExample)
   :outertype: Mapping

   Adds a hasExample property value.

   :param newHasExample: the hasExample property value to be added

addHasName
^^^^^^^^^^

.. java:method::  void addHasName(String newHasName)
   :outertype: Mapping

   Adds a hasName property value.

   :param newHasName: the hasName property value to be added

addHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  void addHasNameGloss(String newHasNameGloss)
   :outertype: Mapping

   Adds a hasNameGloss property value.

   :param newHasNameGloss: the hasNameGloss property value to be added

addHasSourceRole
^^^^^^^^^^^^^^^^

.. java:method::  void addHasSourceRole(Role newHasSourceRole)
   :outertype: Mapping

   Adds a hasSourceRole property value.

   :param newHasSourceRole: the hasSourceRole property value to be added

addHasTargetRole
^^^^^^^^^^^^^^^^

.. java:method::  void addHasTargetRole(Role newHasTargetRole)
   :outertype: Mapping

   Adds a hasTargetRole property value.

   :param newHasTargetRole: the hasTargetRole property value to be added

addIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  void addIsFromLanguage(String newIsFromLanguage)
   :outertype: Mapping

   Adds a isFromLanguage property value.

   :param newIsFromLanguage: the isFromLanguage property value to be added

addIsMappingUsedByMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addIsMappingUsedByMetaphors(Metaphor newIsMappingUsedByMetaphors)
   :outertype: Mapping

   Adds a isMappingUsedByMetaphors property value.

   :param newIsMappingUsedByMetaphors: the isMappingUsedByMetaphors property value to be added

addSupportsEntailments
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void addSupportsEntailments(Entailment newSupportsEntailments)
   :outertype: Mapping

   Adds a supportsEntailments property value.

   :param newSupportsEntailments: the supportsEntailments property value to be added

delete
^^^^^^

.. java:method::  void delete()
   :outertype: Mapping

getHasAlias
^^^^^^^^^^^

.. java:method::  Collection<? extends String> getHasAlias()
   :outertype: Mapping

   Gets all property values for the hasAlias property.

getHasExample
^^^^^^^^^^^^^

.. java:method::  Collection<? extends Example> getHasExample()
   :outertype: Mapping

   Gets all property values for the hasExample property.

getHasName
^^^^^^^^^^

.. java:method::  String getHasName()
   :outertype: Mapping

   Gets the value for the hasName functional property.

getHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  String getHasNameGloss()
   :outertype: Mapping

   Gets the value for the hasNameGloss functional property.

getHasSourceRole
^^^^^^^^^^^^^^^^

.. java:method::  Role getHasSourceRole()
   :outertype: Mapping

   Gets the property value for the hasSourceRole functional property.

getHasTargetRole
^^^^^^^^^^^^^^^^

.. java:method::  Role getHasTargetRole()
   :outertype: Mapping

   Gets the property value for the hasTargetRole functional property.

getIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  String getIsFromLanguage()
   :outertype: Mapping

   Gets the value for the isFromLanguage functional property.

getIsMappingUsedByMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Metaphor> getIsMappingUsedByMetaphors()
   :outertype: Mapping

   Gets all property values for the isMappingUsedByMetaphors property.

getOwlIndividual
^^^^^^^^^^^^^^^^

.. java:method::  OWLNamedIndividual getOwlIndividual()
   :outertype: Mapping

getOwlOntology
^^^^^^^^^^^^^^

.. java:method::  OWLOntology getOwlOntology()
   :outertype: Mapping

getSupportsEntailments
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  Collection<? extends Entailment> getSupportsEntailments()
   :outertype: Mapping

   Gets all property values for the supportsEntailments property.

hasHasAlias
^^^^^^^^^^^

.. java:method::  boolean hasHasAlias()
   :outertype: Mapping

   Checks if the class has a hasAlias property value.

   :return: true if there is a hasAlias property value.

hasHasExample
^^^^^^^^^^^^^

.. java:method::  boolean hasHasExample()
   :outertype: Mapping

   Checks if the class has a hasExample property value.

   :return: true if there is a hasExample property value.

hasHasName
^^^^^^^^^^

.. java:method::  boolean hasHasName()
   :outertype: Mapping

   Checks if the class has a hasName property value.

   :return: true if there is a hasName property value.

hasHasNameGloss
^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasNameGloss()
   :outertype: Mapping

   Checks if the class has a hasNameGloss property value.

   :return: true if there is a hasNameGloss property value.

hasHasSourceRole
^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasSourceRole()
   :outertype: Mapping

   Checks if the class has a hasSourceRole property value.

   :return: true if there is a hasSourceRole property value.

hasHasTargetRole
^^^^^^^^^^^^^^^^

.. java:method::  boolean hasHasTargetRole()
   :outertype: Mapping

   Checks if the class has a hasTargetRole property value.

   :return: true if there is a hasTargetRole property value.

hasIsFromLanguage
^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsFromLanguage()
   :outertype: Mapping

   Checks if the class has a isFromLanguage property value.

   :return: true if there is a isFromLanguage property value.

hasIsMappingUsedByMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasIsMappingUsedByMetaphors()
   :outertype: Mapping

   Checks if the class has a isMappingUsedByMetaphors property value.

   :return: true if there is a isMappingUsedByMetaphors property value.

hasSupportsEntailments
^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  boolean hasSupportsEntailments()
   :outertype: Mapping

   Checks if the class has a supportsEntailments property value.

   :return: true if there is a supportsEntailments property value.

removeHasAlias
^^^^^^^^^^^^^^

.. java:method::  void removeHasAlias(Object oldHasAlias)
   :outertype: Mapping

   Removes a hasAlias property value.

   :param oldHasAlias: the hasAlias property value to be removed.

removeHasExample
^^^^^^^^^^^^^^^^

.. java:method::  void removeHasExample(Example oldHasExample)
   :outertype: Mapping

   Removes a hasExample property value.

   :param oldHasExample: the hasExample property value to be removed.

removeHasName
^^^^^^^^^^^^^

.. java:method::  void removeHasName(String oldHasName)
   :outertype: Mapping

   Removes a hasName property value.

   :param oldHasName: the hasName property value to be removed.

removeHasNameGloss
^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasNameGloss(String oldHasNameGloss)
   :outertype: Mapping

   Removes a hasNameGloss property value.

   :param oldHasNameGloss: the hasNameGloss property value to be removed.

removeHasSourceRole
^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasSourceRole(Role oldHasSourceRole)
   :outertype: Mapping

   Removes a hasSourceRole property value.

   :param oldHasSourceRole: the hasSourceRole property value to be removed.

removeHasTargetRole
^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeHasTargetRole(Role oldHasTargetRole)
   :outertype: Mapping

   Removes a hasTargetRole property value.

   :param oldHasTargetRole: the hasTargetRole property value to be removed.

removeIsFromLanguage
^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsFromLanguage(String oldIsFromLanguage)
   :outertype: Mapping

   Removes a isFromLanguage property value.

   :param oldIsFromLanguage: the isFromLanguage property value to be removed.

removeIsMappingUsedByMetaphors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeIsMappingUsedByMetaphors(Metaphor oldIsMappingUsedByMetaphors)
   :outertype: Mapping

   Removes a isMappingUsedByMetaphors property value.

   :param oldIsMappingUsedByMetaphors: the isMappingUsedByMetaphors property value to be removed.

removeSupportsEntailments
^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  void removeSupportsEntailments(Entailment oldSupportsEntailments)
   :outertype: Mapping

   Removes a supportsEntailments property value.

   :param oldSupportsEntailments: the supportsEntailments property value to be removed.

